
Ultrasonic_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000238e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000238e  00002422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800178  00800178  0000253a  2**0
                  ALLOC
  3 .stab         00001f68  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001195  00000000  00000000  000044a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005639  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000057d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000059c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00007dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a324  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000a7d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b1a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 11 	call	0x224c	; 0x224c <main>
      8a:	0c 94 c5 11 	jmp	0x238a	; 0x238a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 49 11 	jmp	0x2292	; 0x2292 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 65 11 	jmp	0x22ca	; 0x22ca <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 71 11 	jmp	0x22e2	; 0x22e2 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 59 11 	jmp	0x22b2	; 0x22b2 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e9 58       	subi	r30, 0x89	; 137
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <Ultrasonic_edgeProcessing>:
static u8 edge = 0, time= 0;
static u16 distance = 0;

/*The CallBack function*/
static void Ultrasonic_edgeProcessing(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	++edge;
     e00:	80 91 78 01 	lds	r24, 0x0178
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 93 78 01 	sts	0x0178, r24
	if(edge == 1)
     e0a:	80 91 78 01 	lds	r24, 0x0178
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	31 f4       	brne	.+12     	; 0xe1e <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimer();
     e12:	0e 94 ff 10 	call	0x21fe	; 0x21fe <ICU_clearTimer>
		ICU_setEdgeDetection(FALLING);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	0e 94 d5 10 	call	0x21aa	; 0x21aa <ICU_setEdgeDetection>
     e1c:	0b c0       	rjmp	.+22     	; 0xe34 <Ultrasonic_edgeProcessing+0x3c>
	}
	else if(edge == 2)
     e1e:	80 91 78 01 	lds	r24, 0x0178
     e22:	82 30       	cpi	r24, 0x02	; 2
     e24:	39 f4       	brne	.+14     	; 0xe34 <Ultrasonic_edgeProcessing+0x3c>
	{
		time = ICU_getInputCapture();
     e26:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <ICU_getInputCapture>
     e2a:	80 93 79 01 	sts	0x0179, r24
		ICU_setEdgeDetection(RISING);
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	0e 94 d5 10 	call	0x21aa	; 0x21aa <ICU_setEdgeDetection>
	}

}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <Ultrasonic_Trigger>:

/*Function that triggers pin*/
static void Ultrasonic_Trigger(void)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	68 97       	sbiw	r28, 0x18	; 24
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	f8 94       	cli
     e48:	de bf       	out	0x3e, r29	; 62
     e4a:	0f be       	out	0x3f, r0	; 63
     e4c:	cd bf       	out	0x3d, r28	; 61
	/*Set trigger pin to high and wait 10 us then set it to low*/
	GPIO_writePin(Trigger_Port, Trigger_Pin, High);
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	65 e0       	ldi	r22, 0x05	; 5
     e52:	41 e0       	ldi	r20, 0x01	; 1
     e54:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	a0 e2       	ldi	r26, 0x20	; 32
     e5e:	b1 e4       	ldi	r27, 0x41	; 65
     e60:	8d 8b       	std	Y+21, r24	; 0x15
     e62:	9e 8b       	std	Y+22, r25	; 0x16
     e64:	af 8b       	std	Y+23, r26	; 0x17
     e66:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e68:	6d 89       	ldd	r22, Y+21	; 0x15
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	2b ea       	ldi	r18, 0xAB	; 171
     e72:	3a ea       	ldi	r19, 0xAA	; 170
     e74:	4a e2       	ldi	r20, 0x2A	; 42
     e76:	50 e4       	ldi	r21, 0x40	; 64
     e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	89 8b       	std	Y+17, r24	; 0x11
     e82:	9a 8b       	std	Y+18, r25	; 0x12
     e84:	ab 8b       	std	Y+19, r26	; 0x13
     e86:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e88:	69 89       	ldd	r22, Y+17	; 0x11
     e8a:	7a 89       	ldd	r23, Y+18	; 0x12
     e8c:	8b 89       	ldd	r24, Y+19	; 0x13
     e8e:	9c 89       	ldd	r25, Y+20	; 0x14
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e8       	ldi	r20, 0x80	; 128
     e96:	5f e3       	ldi	r21, 0x3F	; 63
     e98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e9c:	88 23       	and	r24, r24
     e9e:	1c f4       	brge	.+6      	; 0xea6 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	88 8b       	std	Y+16, r24	; 0x10
     ea4:	91 c0       	rjmp	.+290    	; 0xfc8 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
     ea6:	69 89       	ldd	r22, Y+17	; 0x11
     ea8:	7a 89       	ldd	r23, Y+18	; 0x12
     eaa:	8b 89       	ldd	r24, Y+19	; 0x13
     eac:	9c 89       	ldd	r25, Y+20	; 0x14
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	4f e7       	ldi	r20, 0x7F	; 127
     eb4:	53 e4       	ldi	r21, 0x43	; 67
     eb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eba:	18 16       	cp	r1, r24
     ebc:	0c f0       	brlt	.+2      	; 0xec0 <Ultrasonic_Trigger+0x86>
     ebe:	7b c0       	rjmp	.+246    	; 0xfb6 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
     ec0:	6d 89       	ldd	r22, Y+21	; 0x15
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	4a e7       	ldi	r20, 0x7A	; 122
     ece:	54 e4       	ldi	r21, 0x44	; 68
     ed0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ed4:	dc 01       	movw	r26, r24
     ed6:	cb 01       	movw	r24, r22
     ed8:	8c 87       	std	Y+12, r24	; 0x0c
     eda:	9d 87       	std	Y+13, r25	; 0x0d
     edc:	ae 87       	std	Y+14, r26	; 0x0e
     ede:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee0:	6c 85       	ldd	r22, Y+12	; 0x0c
     ee2:	7d 85       	ldd	r23, Y+13	; 0x0d
     ee4:	8e 85       	ldd	r24, Y+14	; 0x0e
     ee6:	9f 85       	ldd	r25, Y+15	; 0x0f
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a ef       	ldi	r20, 0xFA	; 250
     eee:	54 e4       	ldi	r21, 0x44	; 68
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	88 87       	std	Y+8, r24	; 0x08
     efa:	99 87       	std	Y+9, r25	; 0x09
     efc:	aa 87       	std	Y+10, r26	; 0x0a
     efe:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f00:	68 85       	ldd	r22, Y+8	; 0x08
     f02:	79 85       	ldd	r23, Y+9	; 0x09
     f04:	8a 85       	ldd	r24, Y+10	; 0x0a
     f06:	9b 85       	ldd	r25, Y+11	; 0x0b
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	2c f4       	brge	.+10     	; 0xf22 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9f 83       	std	Y+7, r25	; 0x07
     f1e:	8e 83       	std	Y+6, r24	; 0x06
     f20:	3f c0       	rjmp	.+126    	; 0xfa0 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
     f22:	68 85       	ldd	r22, Y+8	; 0x08
     f24:	79 85       	ldd	r23, Y+9	; 0x09
     f26:	8a 85       	ldd	r24, Y+10	; 0x0a
     f28:	9b 85       	ldd	r25, Y+11	; 0x0b
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	57 e4       	ldi	r21, 0x47	; 71
     f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f36:	18 16       	cp	r1, r24
     f38:	4c f5       	brge	.+82     	; 0xf8c <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3a:	6c 85       	ldd	r22, Y+12	; 0x0c
     f3c:	7d 85       	ldd	r23, Y+13	; 0x0d
     f3e:	8e 85       	ldd	r24, Y+14	; 0x0e
     f40:	9f 85       	ldd	r25, Y+15	; 0x0f
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e2       	ldi	r20, 0x20	; 32
     f48:	51 e4       	ldi	r21, 0x41	; 65
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	9f 83       	std	Y+7, r25	; 0x07
     f60:	8e 83       	std	Y+6, r24	; 0x06
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <Ultrasonic_Trigger+0x148>
     f64:	88 ec       	ldi	r24, 0xC8	; 200
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	9d 83       	std	Y+5, r25	; 0x05
     f6a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <Ultrasonic_Trigger+0x136>
     f74:	9d 83       	std	Y+5, r25	; 0x05
     f76:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	8e 81       	ldd	r24, Y+6	; 0x06
     f7a:	9f 81       	ldd	r25, Y+7	; 0x07
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	9f 83       	std	Y+7, r25	; 0x07
     f80:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f82:	8e 81       	ldd	r24, Y+6	; 0x06
     f84:	9f 81       	ldd	r25, Y+7	; 0x07
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	69 f7       	brne	.-38     	; 0xf64 <Ultrasonic_Trigger+0x12a>
     f8a:	24 c0       	rjmp	.+72     	; 0xfd4 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8c:	68 85       	ldd	r22, Y+8	; 0x08
     f8e:	79 85       	ldd	r23, Y+9	; 0x09
     f90:	8a 85       	ldd	r24, Y+10	; 0x0a
     f92:	9b 85       	ldd	r25, Y+11	; 0x0b
     f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9f 83       	std	Y+7, r25	; 0x07
     f9e:	8e 83       	std	Y+6, r24	; 0x06
     fa0:	8e 81       	ldd	r24, Y+6	; 0x06
     fa2:	9f 81       	ldd	r25, Y+7	; 0x07
     fa4:	9b 83       	std	Y+3, r25	; 0x03
     fa6:	8a 83       	std	Y+2, r24	; 0x02
     fa8:	8a 81       	ldd	r24, Y+2	; 0x02
     faa:	9b 81       	ldd	r25, Y+3	; 0x03
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <Ultrasonic_Trigger+0x172>
     fb0:	9b 83       	std	Y+3, r25	; 0x03
     fb2:	8a 83       	std	Y+2, r24	; 0x02
     fb4:	0f c0       	rjmp	.+30     	; 0xfd4 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fb6:	69 89       	ldd	r22, Y+17	; 0x11
     fb8:	7a 89       	ldd	r23, Y+18	; 0x12
     fba:	8b 89       	ldd	r24, Y+19	; 0x13
     fbc:	9c 89       	ldd	r25, Y+20	; 0x14
     fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	88 8b       	std	Y+16, r24	; 0x10
     fc8:	88 89       	ldd	r24, Y+16	; 0x10
     fca:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	8a 95       	dec	r24
     fd0:	f1 f7       	brne	.-4      	; 0xfce <Ultrasonic_Trigger+0x194>
     fd2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(Trigger_Port, Trigger_Pin, Low);
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	65 e0       	ldi	r22, 0x05	; 5
     fd8:	40 e0       	ldi	r20, 0x00	; 0
     fda:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
}
     fde:	68 96       	adiw	r28, 0x18	; 24
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <Ultrasonic_Init>:

/*Init the Ultrasonic by initializing the ICU*/
void Ultrasonic_Init(void)
{
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <Ultrasonic_Init+0x6>
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
	/*Init the ICU by Setting Clock to FCPU/8 and set edge detection to be rising*/
	ICU_Config config = {F_CPU_8, RISING};
     ffa:	82 e0       	ldi	r24, 0x02	; 2
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	8a 83       	std	Y+2, r24	; 0x02

	/*Init the ICU*/
	ICU_Init(&config);
    1002:	ce 01       	movw	r24, r28
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <ICU_Init>

	/*Set Trigger pin as output*/
	GPIO_setPinDirection(Trigger_Port, Trigger_Pin, OUTPUT);
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	65 e0       	ldi	r22, 0x05	; 5
    100e:	41 e0       	ldi	r20, 0x01	; 1
    1010:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <GPIO_setPinDirection>

	/*Set the CallBack function */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    1014:	8c ef       	ldi	r24, 0xFC	; 252
    1016:	96 e0       	ldi	r25, 0x06	; 6
    1018:	0e 94 c3 10 	call	0x2186	; 0x2186 <ICU_setCallBack>
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <Ultrasonic_readDistance>:

/*Function that continously read distance which
 * it measures time then calculate distance*/
u16 Ultrasonic_readDistance(void)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	/*Clear all variables in order not to affect measurements from previous values*/
	distance = 0;
    102e:	10 92 7b 01 	sts	0x017B, r1
    1032:	10 92 7a 01 	sts	0x017A, r1
	edge = 0;
    1036:	10 92 78 01 	sts	0x0178, r1
	time= 0;
    103a:	10 92 79 01 	sts	0x0179, r1

	/*Clear ICU Timer value*/
	ICU_clearTimer();
    103e:	0e 94 ff 10 	call	0x21fe	; 0x21fe <ICU_clearTimer>
	/*Trigger a pulse to let ultrasonic make echo*/
	Ultrasonic_Trigger();
    1042:	0e 94 1d 07 	call	0xe3a	; 0xe3a <Ultrasonic_Trigger>

	/*Wait for measuring time from a rising edge*/
	while(edge != NO_EDGES);
    1046:	80 91 78 01 	lds	r24, 0x0178
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	e1 f7       	brne	.-8      	; 0x1046 <Ultrasonic_readDistance+0x20>

	/*Calculating distance and return the value*/
	distance = time/58.8;
    104e:	80 91 79 01 	lds	r24, 0x0179
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	aa 27       	eor	r26, r26
    1058:	97 fd       	sbrc	r25, 7
    105a:	a0 95       	com	r26
    105c:	ba 2f       	mov	r27, r26
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	bc 01       	movw	r22, r24
    106c:	cd 01       	movw	r24, r26
    106e:	23 e3       	ldi	r18, 0x33	; 51
    1070:	33 e3       	ldi	r19, 0x33	; 51
    1072:	4b e6       	ldi	r20, 0x6B	; 107
    1074:	52 e4       	ldi	r21, 0x42	; 66
    1076:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    107a:	dc 01       	movw	r26, r24
    107c:	cb 01       	movw	r24, r22
    107e:	bc 01       	movw	r22, r24
    1080:	cd 01       	movw	r24, r26
    1082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	90 93 7b 01 	sts	0x017B, r25
    108e:	80 93 7a 01 	sts	0x017A, r24
	return distance;
    1092:	80 91 7a 01 	lds	r24, 0x017A
    1096:	90 91 7b 01 	lds	r25, 0x017B
}
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <LCD_init>:
#include "LCD.h"
#include <avr/delay.h>


void LCD_init()
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	cd b7       	in	r28, 0x3d	; 61
    10a6:	de b7       	in	r29, 0x3e	; 62
	GPIO_setPinDirection(ControlPort, RS, OUTPUT);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	41 e0       	ldi	r20, 0x01	; 1
    10ae:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <GPIO_setPinDirection>
	GPIO_setPinDirection(ControlPort, RW, OUTPUT);
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	41 e0       	ldi	r20, 0x01	; 1
    10b8:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <GPIO_setPinDirection>
	GPIO_setPinDirection(ControlPort, EN, OUTPUT);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	62 e0       	ldi	r22, 0x02	; 2
    10c0:	41 e0       	ldi	r20, 0x01	; 1
    10c2:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <GPIO_setPinDirection>

#if Data_Bit_Mode == 8
	GPIO_setPortDirection(DataPort,OUTPUT);
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <GPIO_setPortDirection>
	LCD_sendCommand(LCD_8bit);
    10ce:	88 e3       	ldi	r24, 0x38	; 56
    10d0:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_sendCommand>
	GPIO_setPinDirection(DataPort, DataPin+2, OUTPUT);
	GPIO_setPinDirection(DataPort, DataPin+3, OUTPUT);

	LCD_sendCommand(LCD_GO_TO_HOME);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    10d4:	8c e0       	ldi	r24, 0x0C	; 12
    10d6:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_sendCommand>
	LCD_sendCommand(LCD_ClearScreen);
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_sendCommand>
}
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <LCD_sendCommand>:

void LCD_sendCommand(u8 cmd)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	e9 97       	sbiw	r28, 0x39	; 57
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(ControlPort, RS, Low);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
	GPIO_writePin(ControlPort, RW, Low);
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	a0 e8       	ldi	r26, 0x80	; 128
    1116:	bf e3       	ldi	r27, 0x3F	; 63
    1118:	8d ab       	std	Y+53, r24	; 0x35
    111a:	9e ab       	std	Y+54, r25	; 0x36
    111c:	af ab       	std	Y+55, r26	; 0x37
    111e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1120:	6d a9       	ldd	r22, Y+53	; 0x35
    1122:	7e a9       	ldd	r23, Y+54	; 0x36
    1124:	8f a9       	ldd	r24, Y+55	; 0x37
    1126:	98 ad       	ldd	r25, Y+56	; 0x38
    1128:	20 e0       	ldi	r18, 0x00	; 0
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	4a ef       	ldi	r20, 0xFA	; 250
    112e:	54 e4       	ldi	r21, 0x44	; 68
    1130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	89 ab       	std	Y+49, r24	; 0x31
    113a:	9a ab       	std	Y+50, r25	; 0x32
    113c:	ab ab       	std	Y+51, r26	; 0x33
    113e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1140:	69 a9       	ldd	r22, Y+49	; 0x31
    1142:	7a a9       	ldd	r23, Y+50	; 0x32
    1144:	8b a9       	ldd	r24, Y+51	; 0x33
    1146:	9c a9       	ldd	r25, Y+52	; 0x34
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e8       	ldi	r20, 0x80	; 128
    114e:	5f e3       	ldi	r21, 0x3F	; 63
    1150:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1154:	88 23       	and	r24, r24
    1156:	2c f4       	brge	.+10     	; 0x1162 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	98 ab       	std	Y+48, r25	; 0x30
    115e:	8f a7       	std	Y+47, r24	; 0x2f
    1160:	3f c0       	rjmp	.+126    	; 0x11e0 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1162:	69 a9       	ldd	r22, Y+49	; 0x31
    1164:	7a a9       	ldd	r23, Y+50	; 0x32
    1166:	8b a9       	ldd	r24, Y+51	; 0x33
    1168:	9c a9       	ldd	r25, Y+52	; 0x34
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	3f ef       	ldi	r19, 0xFF	; 255
    116e:	4f e7       	ldi	r20, 0x7F	; 127
    1170:	57 e4       	ldi	r21, 0x47	; 71
    1172:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1176:	18 16       	cp	r1, r24
    1178:	4c f5       	brge	.+82     	; 0x11cc <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117a:	6d a9       	ldd	r22, Y+53	; 0x35
    117c:	7e a9       	ldd	r23, Y+54	; 0x36
    117e:	8f a9       	ldd	r24, Y+55	; 0x37
    1180:	98 ad       	ldd	r25, Y+56	; 0x38
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e2       	ldi	r20, 0x20	; 32
    1188:	51 e4       	ldi	r21, 0x41	; 65
    118a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	bc 01       	movw	r22, r24
    1194:	cd 01       	movw	r24, r26
    1196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119a:	dc 01       	movw	r26, r24
    119c:	cb 01       	movw	r24, r22
    119e:	98 ab       	std	Y+48, r25	; 0x30
    11a0:	8f a7       	std	Y+47, r24	; 0x2f
    11a2:	0f c0       	rjmp	.+30     	; 0x11c2 <LCD_sendCommand+0xdc>
    11a4:	88 ec       	ldi	r24, 0xC8	; 200
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9e a7       	std	Y+46, r25	; 0x2e
    11aa:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    11ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	f1 f7       	brne	.-4      	; 0x11b0 <LCD_sendCommand+0xca>
    11b4:	9e a7       	std	Y+46, r25	; 0x2e
    11b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ba:	98 a9       	ldd	r25, Y+48	; 0x30
    11bc:	01 97       	sbiw	r24, 0x01	; 1
    11be:	98 ab       	std	Y+48, r25	; 0x30
    11c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    11c4:	98 a9       	ldd	r25, Y+48	; 0x30
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	69 f7       	brne	.-38     	; 0x11a4 <LCD_sendCommand+0xbe>
    11ca:	14 c0       	rjmp	.+40     	; 0x11f4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11cc:	69 a9       	ldd	r22, Y+49	; 0x31
    11ce:	7a a9       	ldd	r23, Y+50	; 0x32
    11d0:	8b a9       	ldd	r24, Y+51	; 0x33
    11d2:	9c a9       	ldd	r25, Y+52	; 0x34
    11d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	98 ab       	std	Y+48, r25	; 0x30
    11de:	8f a7       	std	Y+47, r24	; 0x2f
    11e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    11e2:	98 a9       	ldd	r25, Y+48	; 0x30
    11e4:	9c a7       	std	Y+44, r25	; 0x2c
    11e6:	8b a7       	std	Y+43, r24	; 0x2b
    11e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    11ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <LCD_sendCommand+0x106>
    11f0:	9c a7       	std	Y+44, r25	; 0x2c
    11f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, High);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	62 e0       	ldi	r22, 0x02	; 2
    11f8:	41 e0       	ldi	r20, 0x01	; 1
    11fa:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 e8       	ldi	r26, 0x80	; 128
    1204:	bf e3       	ldi	r27, 0x3F	; 63
    1206:	8f a3       	std	Y+39, r24	; 0x27
    1208:	98 a7       	std	Y+40, r25	; 0x28
    120a:	a9 a7       	std	Y+41, r26	; 0x29
    120c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120e:	6f a1       	ldd	r22, Y+39	; 0x27
    1210:	78 a5       	ldd	r23, Y+40	; 0x28
    1212:	89 a5       	ldd	r24, Y+41	; 0x29
    1214:	9a a5       	ldd	r25, Y+42	; 0x2a
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a ef       	ldi	r20, 0xFA	; 250
    121c:	54 e4       	ldi	r21, 0x44	; 68
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8b a3       	std	Y+35, r24	; 0x23
    1228:	9c a3       	std	Y+36, r25	; 0x24
    122a:	ad a3       	std	Y+37, r26	; 0x25
    122c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    122e:	6b a1       	ldd	r22, Y+35	; 0x23
    1230:	7c a1       	ldd	r23, Y+36	; 0x24
    1232:	8d a1       	ldd	r24, Y+37	; 0x25
    1234:	9e a1       	ldd	r25, Y+38	; 0x26
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1242:	88 23       	and	r24, r24
    1244:	2c f4       	brge	.+10     	; 0x1250 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9a a3       	std	Y+34, r25	; 0x22
    124c:	89 a3       	std	Y+33, r24	; 0x21
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1250:	6b a1       	ldd	r22, Y+35	; 0x23
    1252:	7c a1       	ldd	r23, Y+36	; 0x24
    1254:	8d a1       	ldd	r24, Y+37	; 0x25
    1256:	9e a1       	ldd	r25, Y+38	; 0x26
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	57 e4       	ldi	r21, 0x47	; 71
    1260:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	4c f5       	brge	.+82     	; 0x12ba <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	6f a1       	ldd	r22, Y+39	; 0x27
    126a:	78 a5       	ldd	r23, Y+40	; 0x28
    126c:	89 a5       	ldd	r24, Y+41	; 0x29
    126e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9a a3       	std	Y+34, r25	; 0x22
    128e:	89 a3       	std	Y+33, r24	; 0x21
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <LCD_sendCommand+0x1ca>
    1292:	88 ec       	ldi	r24, 0xC8	; 200
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	98 a3       	std	Y+32, r25	; 0x20
    1298:	8f 8f       	std	Y+31, r24	; 0x1f
    129a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    129c:	98 a1       	ldd	r25, Y+32	; 0x20
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <LCD_sendCommand+0x1b8>
    12a2:	98 a3       	std	Y+32, r25	; 0x20
    12a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a6:	89 a1       	ldd	r24, Y+33	; 0x21
    12a8:	9a a1       	ldd	r25, Y+34	; 0x22
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9a a3       	std	Y+34, r25	; 0x22
    12ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	89 a1       	ldd	r24, Y+33	; 0x21
    12b2:	9a a1       	ldd	r25, Y+34	; 0x22
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f7       	brne	.-38     	; 0x1292 <LCD_sendCommand+0x1ac>
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	6b a1       	ldd	r22, Y+35	; 0x23
    12bc:	7c a1       	ldd	r23, Y+36	; 0x24
    12be:	8d a1       	ldd	r24, Y+37	; 0x25
    12c0:	9e a1       	ldd	r25, Y+38	; 0x26
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9a a3       	std	Y+34, r25	; 0x22
    12cc:	89 a3       	std	Y+33, r24	; 0x21
    12ce:	89 a1       	ldd	r24, Y+33	; 0x21
    12d0:	9a a1       	ldd	r25, Y+34	; 0x22
    12d2:	9e 8f       	std	Y+30, r25	; 0x1e
    12d4:	8d 8f       	std	Y+29, r24	; 0x1d
    12d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <LCD_sendCommand+0x1f4>
    12de:	9e 8f       	std	Y+30, r25	; 0x1e
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(DataPort, cmd);
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	69 ad       	ldd	r22, Y+57	; 0x39
    12e6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <GPIO_writePort>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a0 e8       	ldi	r26, 0x80	; 128
    12f0:	bf e3       	ldi	r27, 0x3F	; 63
    12f2:	89 8f       	std	Y+25, r24	; 0x19
    12f4:	9a 8f       	std	Y+26, r25	; 0x1a
    12f6:	ab 8f       	std	Y+27, r26	; 0x1b
    12f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fa:	69 8d       	ldd	r22, Y+25	; 0x19
    12fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	4a ef       	ldi	r20, 0xFA	; 250
    1308:	54 e4       	ldi	r21, 0x44	; 68
    130a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8d 8b       	std	Y+21, r24	; 0x15
    1314:	9e 8b       	std	Y+22, r25	; 0x16
    1316:	af 8b       	std	Y+23, r26	; 0x17
    1318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    131a:	6d 89       	ldd	r22, Y+21	; 0x15
    131c:	7e 89       	ldd	r23, Y+22	; 0x16
    131e:	8f 89       	ldd	r24, Y+23	; 0x17
    1320:	98 8d       	ldd	r25, Y+24	; 0x18
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	5f e3       	ldi	r21, 0x3F	; 63
    132a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    132e:	88 23       	and	r24, r24
    1330:	2c f4       	brge	.+10     	; 0x133c <LCD_sendCommand+0x256>
		__ticks = 1;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	9c 8b       	std	Y+20, r25	; 0x14
    1338:	8b 8b       	std	Y+19, r24	; 0x13
    133a:	3f c0       	rjmp	.+126    	; 0x13ba <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    133c:	6d 89       	ldd	r22, Y+21	; 0x15
    133e:	7e 89       	ldd	r23, Y+22	; 0x16
    1340:	8f 89       	ldd	r24, Y+23	; 0x17
    1342:	98 8d       	ldd	r25, Y+24	; 0x18
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	3f ef       	ldi	r19, 0xFF	; 255
    1348:	4f e7       	ldi	r20, 0x7F	; 127
    134a:	57 e4       	ldi	r21, 0x47	; 71
    134c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1350:	18 16       	cp	r1, r24
    1352:	4c f5       	brge	.+82     	; 0x13a6 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1354:	69 8d       	ldd	r22, Y+25	; 0x19
    1356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	40 e2       	ldi	r20, 0x20	; 32
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9c 8b       	std	Y+20, r25	; 0x14
    137a:	8b 8b       	std	Y+19, r24	; 0x13
    137c:	0f c0       	rjmp	.+30     	; 0x139c <LCD_sendCommand+0x2b6>
    137e:	88 ec       	ldi	r24, 0xC8	; 200
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	9a 8b       	std	Y+18, r25	; 0x12
    1384:	89 8b       	std	Y+17, r24	; 0x11
    1386:	89 89       	ldd	r24, Y+17	; 0x11
    1388:	9a 89       	ldd	r25, Y+18	; 0x12
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	f1 f7       	brne	.-4      	; 0x138a <LCD_sendCommand+0x2a4>
    138e:	9a 8b       	std	Y+18, r25	; 0x12
    1390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1392:	8b 89       	ldd	r24, Y+19	; 0x13
    1394:	9c 89       	ldd	r25, Y+20	; 0x14
    1396:	01 97       	sbiw	r24, 0x01	; 1
    1398:	9c 8b       	std	Y+20, r25	; 0x14
    139a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139c:	8b 89       	ldd	r24, Y+19	; 0x13
    139e:	9c 89       	ldd	r25, Y+20	; 0x14
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	69 f7       	brne	.-38     	; 0x137e <LCD_sendCommand+0x298>
    13a4:	14 c0       	rjmp	.+40     	; 0x13ce <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a6:	6d 89       	ldd	r22, Y+21	; 0x15
    13a8:	7e 89       	ldd	r23, Y+22	; 0x16
    13aa:	8f 89       	ldd	r24, Y+23	; 0x17
    13ac:	98 8d       	ldd	r25, Y+24	; 0x18
    13ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	9c 8b       	std	Y+20, r25	; 0x14
    13b8:	8b 8b       	std	Y+19, r24	; 0x13
    13ba:	8b 89       	ldd	r24, Y+19	; 0x13
    13bc:	9c 89       	ldd	r25, Y+20	; 0x14
    13be:	98 8b       	std	Y+16, r25	; 0x10
    13c0:	8f 87       	std	Y+15, r24	; 0x0f
    13c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13c4:	98 89       	ldd	r25, Y+16	; 0x10
    13c6:	01 97       	sbiw	r24, 0x01	; 1
    13c8:	f1 f7       	brne	.-4      	; 0x13c6 <LCD_sendCommand+0x2e0>
    13ca:	98 8b       	std	Y+16, r25	; 0x10
    13cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, Low);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	62 e0       	ldi	r22, 0x02	; 2
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a0 e8       	ldi	r26, 0x80	; 128
    13de:	bf e3       	ldi	r27, 0x3F	; 63
    13e0:	8b 87       	std	Y+11, r24	; 0x0b
    13e2:	9c 87       	std	Y+12, r25	; 0x0c
    13e4:	ad 87       	std	Y+13, r26	; 0x0d
    13e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	4a ef       	ldi	r20, 0xFA	; 250
    13f6:	54 e4       	ldi	r21, 0x44	; 68
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	8f 83       	std	Y+7, r24	; 0x07
    1402:	98 87       	std	Y+8, r25	; 0x08
    1404:	a9 87       	std	Y+9, r26	; 0x09
    1406:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1408:	6f 81       	ldd	r22, Y+7	; 0x07
    140a:	78 85       	ldd	r23, Y+8	; 0x08
    140c:	89 85       	ldd	r24, Y+9	; 0x09
    140e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	40 e8       	ldi	r20, 0x80	; 128
    1416:	5f e3       	ldi	r21, 0x3F	; 63
    1418:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    141c:	88 23       	and	r24, r24
    141e:	2c f4       	brge	.+10     	; 0x142a <LCD_sendCommand+0x344>
		__ticks = 1;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	3f c0       	rjmp	.+126    	; 0x14a8 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	3f ef       	ldi	r19, 0xFF	; 255
    1436:	4f e7       	ldi	r20, 0x7F	; 127
    1438:	57 e4       	ldi	r21, 0x47	; 71
    143a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    143e:	18 16       	cp	r1, r24
    1440:	4c f5       	brge	.+82     	; 0x1494 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1442:	6b 85       	ldd	r22, Y+11	; 0x0b
    1444:	7c 85       	ldd	r23, Y+12	; 0x0c
    1446:	8d 85       	ldd	r24, Y+13	; 0x0d
    1448:	9e 85       	ldd	r25, Y+14	; 0x0e
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	bc 01       	movw	r22, r24
    145c:	cd 01       	movw	r24, r26
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	0f c0       	rjmp	.+30     	; 0x148a <LCD_sendCommand+0x3a4>
    146c:	88 ec       	ldi	r24, 0xC8	; 200
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	9c 83       	std	Y+4, r25	; 0x04
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	f1 f7       	brne	.-4      	; 0x1478 <LCD_sendCommand+0x392>
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    148a:	8d 81       	ldd	r24, Y+5	; 0x05
    148c:	9e 81       	ldd	r25, Y+6	; 0x06
    148e:	00 97       	sbiw	r24, 0x00	; 0
    1490:	69 f7       	brne	.-38     	; 0x146c <LCD_sendCommand+0x386>
    1492:	14 c0       	rjmp	.+40     	; 0x14bc <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1494:	6f 81       	ldd	r22, Y+7	; 0x07
    1496:	78 85       	ldd	r23, Y+8	; 0x08
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	9a 85       	ldd	r25, Y+10	; 0x0a
    149c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	9e 83       	std	Y+6, r25	; 0x06
    14a6:	8d 83       	std	Y+5, r24	; 0x05
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	9a 81       	ldd	r25, Y+2	; 0x02
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	f1 f7       	brne	.-4      	; 0x14b4 <LCD_sendCommand+0x3ce>
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    14bc:	e9 96       	adiw	r28, 0x39	; 57
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <LCD_DisplayCharacter>:

void LCD_DisplayCharacter(u8 ch)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	cd b7       	in	r28, 0x3d	; 61
    14d4:	de b7       	in	r29, 0x3e	; 62
    14d6:	e9 97       	sbiw	r28, 0x39	; 57
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(ControlPort, RS, High);
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
	GPIO_writePin(ControlPort, RW, Low);
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	61 e0       	ldi	r22, 0x01	; 1
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a0 e8       	ldi	r26, 0x80	; 128
    14fe:	bf e3       	ldi	r27, 0x3F	; 63
    1500:	8d ab       	std	Y+53, r24	; 0x35
    1502:	9e ab       	std	Y+54, r25	; 0x36
    1504:	af ab       	std	Y+55, r26	; 0x37
    1506:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1508:	6d a9       	ldd	r22, Y+53	; 0x35
    150a:	7e a9       	ldd	r23, Y+54	; 0x36
    150c:	8f a9       	ldd	r24, Y+55	; 0x37
    150e:	98 ad       	ldd	r25, Y+56	; 0x38
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4a ef       	ldi	r20, 0xFA	; 250
    1516:	54 e4       	ldi	r21, 0x44	; 68
    1518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151c:	dc 01       	movw	r26, r24
    151e:	cb 01       	movw	r24, r22
    1520:	89 ab       	std	Y+49, r24	; 0x31
    1522:	9a ab       	std	Y+50, r25	; 0x32
    1524:	ab ab       	std	Y+51, r26	; 0x33
    1526:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1528:	69 a9       	ldd	r22, Y+49	; 0x31
    152a:	7a a9       	ldd	r23, Y+50	; 0x32
    152c:	8b a9       	ldd	r24, Y+51	; 0x33
    152e:	9c a9       	ldd	r25, Y+52	; 0x34
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e8       	ldi	r20, 0x80	; 128
    1536:	5f e3       	ldi	r21, 0x3F	; 63
    1538:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    153c:	88 23       	and	r24, r24
    153e:	2c f4       	brge	.+10     	; 0x154a <LCD_DisplayCharacter+0x7c>
		__ticks = 1;
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	98 ab       	std	Y+48, r25	; 0x30
    1546:	8f a7       	std	Y+47, r24	; 0x2f
    1548:	3f c0       	rjmp	.+126    	; 0x15c8 <LCD_DisplayCharacter+0xfa>
	else if (__tmp > 65535)
    154a:	69 a9       	ldd	r22, Y+49	; 0x31
    154c:	7a a9       	ldd	r23, Y+50	; 0x32
    154e:	8b a9       	ldd	r24, Y+51	; 0x33
    1550:	9c a9       	ldd	r25, Y+52	; 0x34
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	3f ef       	ldi	r19, 0xFF	; 255
    1556:	4f e7       	ldi	r20, 0x7F	; 127
    1558:	57 e4       	ldi	r21, 0x47	; 71
    155a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    155e:	18 16       	cp	r1, r24
    1560:	4c f5       	brge	.+82     	; 0x15b4 <LCD_DisplayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1562:	6d a9       	ldd	r22, Y+53	; 0x35
    1564:	7e a9       	ldd	r23, Y+54	; 0x36
    1566:	8f a9       	ldd	r24, Y+55	; 0x37
    1568:	98 ad       	ldd	r25, Y+56	; 0x38
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e2       	ldi	r20, 0x20	; 32
    1570:	51 e4       	ldi	r21, 0x41	; 65
    1572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1576:	dc 01       	movw	r26, r24
    1578:	cb 01       	movw	r24, r22
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	98 ab       	std	Y+48, r25	; 0x30
    1588:	8f a7       	std	Y+47, r24	; 0x2f
    158a:	0f c0       	rjmp	.+30     	; 0x15aa <LCD_DisplayCharacter+0xdc>
    158c:	88 ec       	ldi	r24, 0xC8	; 200
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9e a7       	std	Y+46, r25	; 0x2e
    1592:	8d a7       	std	Y+45, r24	; 0x2d
    1594:	8d a5       	ldd	r24, Y+45	; 0x2d
    1596:	9e a5       	ldd	r25, Y+46	; 0x2e
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <LCD_DisplayCharacter+0xca>
    159c:	9e a7       	std	Y+46, r25	; 0x2e
    159e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15a2:	98 a9       	ldd	r25, Y+48	; 0x30
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	98 ab       	std	Y+48, r25	; 0x30
    15a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ac:	98 a9       	ldd	r25, Y+48	; 0x30
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	69 f7       	brne	.-38     	; 0x158c <LCD_DisplayCharacter+0xbe>
    15b2:	14 c0       	rjmp	.+40     	; 0x15dc <LCD_DisplayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	69 a9       	ldd	r22, Y+49	; 0x31
    15b6:	7a a9       	ldd	r23, Y+50	; 0x32
    15b8:	8b a9       	ldd	r24, Y+51	; 0x33
    15ba:	9c a9       	ldd	r25, Y+52	; 0x34
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	98 ab       	std	Y+48, r25	; 0x30
    15c6:	8f a7       	std	Y+47, r24	; 0x2f
    15c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15ca:	98 a9       	ldd	r25, Y+48	; 0x30
    15cc:	9c a7       	std	Y+44, r25	; 0x2c
    15ce:	8b a7       	std	Y+43, r24	; 0x2b
    15d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    15d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <LCD_DisplayCharacter+0x106>
    15d8:	9c a7       	std	Y+44, r25	; 0x2c
    15da:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, High);
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	62 e0       	ldi	r22, 0x02	; 2
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 e8       	ldi	r26, 0x80	; 128
    15ec:	bf e3       	ldi	r27, 0x3F	; 63
    15ee:	8f a3       	std	Y+39, r24	; 0x27
    15f0:	98 a7       	std	Y+40, r25	; 0x28
    15f2:	a9 a7       	std	Y+41, r26	; 0x29
    15f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	6f a1       	ldd	r22, Y+39	; 0x27
    15f8:	78 a5       	ldd	r23, Y+40	; 0x28
    15fa:	89 a5       	ldd	r24, Y+41	; 0x29
    15fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a ef       	ldi	r20, 0xFA	; 250
    1604:	54 e4       	ldi	r21, 0x44	; 68
    1606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8b a3       	std	Y+35, r24	; 0x23
    1610:	9c a3       	std	Y+36, r25	; 0x24
    1612:	ad a3       	std	Y+37, r26	; 0x25
    1614:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1616:	6b a1       	ldd	r22, Y+35	; 0x23
    1618:	7c a1       	ldd	r23, Y+36	; 0x24
    161a:	8d a1       	ldd	r24, Y+37	; 0x25
    161c:	9e a1       	ldd	r25, Y+38	; 0x26
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <LCD_DisplayCharacter+0x16a>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9a a3       	std	Y+34, r25	; 0x22
    1634:	89 a3       	std	Y+33, r24	; 0x21
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <LCD_DisplayCharacter+0x1e8>
	else if (__tmp > 65535)
    1638:	6b a1       	ldd	r22, Y+35	; 0x23
    163a:	7c a1       	ldd	r23, Y+36	; 0x24
    163c:	8d a1       	ldd	r24, Y+37	; 0x25
    163e:	9e a1       	ldd	r25, Y+38	; 0x26
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <LCD_DisplayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	6f a1       	ldd	r22, Y+39	; 0x27
    1652:	78 a5       	ldd	r23, Y+40	; 0x28
    1654:	89 a5       	ldd	r24, Y+41	; 0x29
    1656:	9a a5       	ldd	r25, Y+42	; 0x2a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9a a3       	std	Y+34, r25	; 0x22
    1676:	89 a3       	std	Y+33, r24	; 0x21
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <LCD_DisplayCharacter+0x1ca>
    167a:	88 ec       	ldi	r24, 0xC8	; 200
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	98 a3       	std	Y+32, r25	; 0x20
    1680:	8f 8f       	std	Y+31, r24	; 0x1f
    1682:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1684:	98 a1       	ldd	r25, Y+32	; 0x20
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <LCD_DisplayCharacter+0x1b8>
    168a:	98 a3       	std	Y+32, r25	; 0x20
    168c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	89 a1       	ldd	r24, Y+33	; 0x21
    1690:	9a a1       	ldd	r25, Y+34	; 0x22
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9a a3       	std	Y+34, r25	; 0x22
    1696:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	89 a1       	ldd	r24, Y+33	; 0x21
    169a:	9a a1       	ldd	r25, Y+34	; 0x22
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <LCD_DisplayCharacter+0x1ac>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <LCD_DisplayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6b a1       	ldd	r22, Y+35	; 0x23
    16a4:	7c a1       	ldd	r23, Y+36	; 0x24
    16a6:	8d a1       	ldd	r24, Y+37	; 0x25
    16a8:	9e a1       	ldd	r25, Y+38	; 0x26
    16aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9a a3       	std	Y+34, r25	; 0x22
    16b4:	89 a3       	std	Y+33, r24	; 0x21
    16b6:	89 a1       	ldd	r24, Y+33	; 0x21
    16b8:	9a a1       	ldd	r25, Y+34	; 0x22
    16ba:	9e 8f       	std	Y+30, r25	; 0x1e
    16bc:	8d 8f       	std	Y+29, r24	; 0x1d
    16be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <LCD_DisplayCharacter+0x1f4>
    16c6:	9e 8f       	std	Y+30, r25	; 0x1e
    16c8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(DataPort, ch);
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	69 ad       	ldd	r22, Y+57	; 0x39
    16ce:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <GPIO_writePort>
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e8       	ldi	r26, 0x80	; 128
    16d8:	bf e3       	ldi	r27, 0x3F	; 63
    16da:	89 8f       	std	Y+25, r24	; 0x19
    16dc:	9a 8f       	std	Y+26, r25	; 0x1a
    16de:	ab 8f       	std	Y+27, r26	; 0x1b
    16e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e2:	69 8d       	ldd	r22, Y+25	; 0x19
    16e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	4a ef       	ldi	r20, 0xFA	; 250
    16f0:	54 e4       	ldi	r21, 0x44	; 68
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	8d 8b       	std	Y+21, r24	; 0x15
    16fc:	9e 8b       	std	Y+22, r25	; 0x16
    16fe:	af 8b       	std	Y+23, r26	; 0x17
    1700:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1702:	6d 89       	ldd	r22, Y+21	; 0x15
    1704:	7e 89       	ldd	r23, Y+22	; 0x16
    1706:	8f 89       	ldd	r24, Y+23	; 0x17
    1708:	98 8d       	ldd	r25, Y+24	; 0x18
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e8       	ldi	r20, 0x80	; 128
    1710:	5f e3       	ldi	r21, 0x3F	; 63
    1712:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1716:	88 23       	and	r24, r24
    1718:	2c f4       	brge	.+10     	; 0x1724 <LCD_DisplayCharacter+0x256>
		__ticks = 1;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	9c 8b       	std	Y+20, r25	; 0x14
    1720:	8b 8b       	std	Y+19, r24	; 0x13
    1722:	3f c0       	rjmp	.+126    	; 0x17a2 <LCD_DisplayCharacter+0x2d4>
	else if (__tmp > 65535)
    1724:	6d 89       	ldd	r22, Y+21	; 0x15
    1726:	7e 89       	ldd	r23, Y+22	; 0x16
    1728:	8f 89       	ldd	r24, Y+23	; 0x17
    172a:	98 8d       	ldd	r25, Y+24	; 0x18
    172c:	20 e0       	ldi	r18, 0x00	; 0
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	57 e4       	ldi	r21, 0x47	; 71
    1734:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1738:	18 16       	cp	r1, r24
    173a:	4c f5       	brge	.+82     	; 0x178e <LCD_DisplayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173c:	69 8d       	ldd	r22, Y+25	; 0x19
    173e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e2       	ldi	r20, 0x20	; 32
    174a:	51 e4       	ldi	r21, 0x41	; 65
    174c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	bc 01       	movw	r22, r24
    1756:	cd 01       	movw	r24, r26
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9c 8b       	std	Y+20, r25	; 0x14
    1762:	8b 8b       	std	Y+19, r24	; 0x13
    1764:	0f c0       	rjmp	.+30     	; 0x1784 <LCD_DisplayCharacter+0x2b6>
    1766:	88 ec       	ldi	r24, 0xC8	; 200
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9a 8b       	std	Y+18, r25	; 0x12
    176c:	89 8b       	std	Y+17, r24	; 0x11
    176e:	89 89       	ldd	r24, Y+17	; 0x11
    1770:	9a 89       	ldd	r25, Y+18	; 0x12
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_DisplayCharacter+0x2a4>
    1776:	9a 8b       	std	Y+18, r25	; 0x12
    1778:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	8b 89       	ldd	r24, Y+19	; 0x13
    177c:	9c 89       	ldd	r25, Y+20	; 0x14
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	9c 8b       	std	Y+20, r25	; 0x14
    1782:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1784:	8b 89       	ldd	r24, Y+19	; 0x13
    1786:	9c 89       	ldd	r25, Y+20	; 0x14
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	69 f7       	brne	.-38     	; 0x1766 <LCD_DisplayCharacter+0x298>
    178c:	14 c0       	rjmp	.+40     	; 0x17b6 <LCD_DisplayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    178e:	6d 89       	ldd	r22, Y+21	; 0x15
    1790:	7e 89       	ldd	r23, Y+22	; 0x16
    1792:	8f 89       	ldd	r24, Y+23	; 0x17
    1794:	98 8d       	ldd	r25, Y+24	; 0x18
    1796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	9c 8b       	std	Y+20, r25	; 0x14
    17a0:	8b 8b       	std	Y+19, r24	; 0x13
    17a2:	8b 89       	ldd	r24, Y+19	; 0x13
    17a4:	9c 89       	ldd	r25, Y+20	; 0x14
    17a6:	98 8b       	std	Y+16, r25	; 0x10
    17a8:	8f 87       	std	Y+15, r24	; 0x0f
    17aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ac:	98 89       	ldd	r25, Y+16	; 0x10
    17ae:	01 97       	sbiw	r24, 0x01	; 1
    17b0:	f1 f7       	brne	.-4      	; 0x17ae <LCD_DisplayCharacter+0x2e0>
    17b2:	98 8b       	std	Y+16, r25	; 0x10
    17b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, Low);
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	40 e0       	ldi	r20, 0x00	; 0
    17bc:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <GPIO_writePin>
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e8       	ldi	r26, 0x80	; 128
    17c6:	bf e3       	ldi	r27, 0x3F	; 63
    17c8:	8b 87       	std	Y+11, r24	; 0x0b
    17ca:	9c 87       	std	Y+12, r25	; 0x0c
    17cc:	ad 87       	std	Y+13, r26	; 0x0d
    17ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	4a ef       	ldi	r20, 0xFA	; 250
    17de:	54 e4       	ldi	r21, 0x44	; 68
    17e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	8f 83       	std	Y+7, r24	; 0x07
    17ea:	98 87       	std	Y+8, r25	; 0x08
    17ec:	a9 87       	std	Y+9, r26	; 0x09
    17ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17f0:	6f 81       	ldd	r22, Y+7	; 0x07
    17f2:	78 85       	ldd	r23, Y+8	; 0x08
    17f4:	89 85       	ldd	r24, Y+9	; 0x09
    17f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e8       	ldi	r20, 0x80	; 128
    17fe:	5f e3       	ldi	r21, 0x3F	; 63
    1800:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1804:	88 23       	and	r24, r24
    1806:	2c f4       	brge	.+10     	; 0x1812 <LCD_DisplayCharacter+0x344>
		__ticks = 1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
    1810:	3f c0       	rjmp	.+126    	; 0x1890 <LCD_DisplayCharacter+0x3c2>
	else if (__tmp > 65535)
    1812:	6f 81       	ldd	r22, Y+7	; 0x07
    1814:	78 85       	ldd	r23, Y+8	; 0x08
    1816:	89 85       	ldd	r24, Y+9	; 0x09
    1818:	9a 85       	ldd	r25, Y+10	; 0x0a
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	4f e7       	ldi	r20, 0x7F	; 127
    1820:	57 e4       	ldi	r21, 0x47	; 71
    1822:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1826:	18 16       	cp	r1, r24
    1828:	4c f5       	brge	.+82     	; 0x187c <LCD_DisplayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182a:	6b 85       	ldd	r22, Y+11	; 0x0b
    182c:	7c 85       	ldd	r23, Y+12	; 0x0c
    182e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1830:	9e 85       	ldd	r25, Y+14	; 0x0e
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e2       	ldi	r20, 0x20	; 32
    1838:	51 e4       	ldi	r21, 0x41	; 65
    183a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	bc 01       	movw	r22, r24
    1844:	cd 01       	movw	r24, r26
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	0f c0       	rjmp	.+30     	; 0x1872 <LCD_DisplayCharacter+0x3a4>
    1854:	88 ec       	ldi	r24, 0xC8	; 200
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	9c 83       	std	Y+4, r25	; 0x04
    185a:	8b 83       	std	Y+3, r24	; 0x03
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <LCD_DisplayCharacter+0x392>
    1864:	9c 83       	std	Y+4, r25	; 0x04
    1866:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    186a:	9e 81       	ldd	r25, Y+6	; 0x06
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1872:	8d 81       	ldd	r24, Y+5	; 0x05
    1874:	9e 81       	ldd	r25, Y+6	; 0x06
    1876:	00 97       	sbiw	r24, 0x00	; 0
    1878:	69 f7       	brne	.-38     	; 0x1854 <LCD_DisplayCharacter+0x386>
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <LCD_DisplayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187c:	6f 81       	ldd	r22, Y+7	; 0x07
    187e:	78 85       	ldd	r23, Y+8	; 0x08
    1880:	89 85       	ldd	r24, Y+9	; 0x09
    1882:	9a 85       	ldd	r25, Y+10	; 0x0a
    1884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	9e 83       	std	Y+6, r25	; 0x06
    188e:	8d 83       	std	Y+5, r24	; 0x05
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <LCD_DisplayCharacter+0x3ce>
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    18a4:	e9 96       	adiw	r28, 0x39	; 57
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <LCD_Displaystring>:

void LCD_Displaystring(const u8 *c)
{
    18b6:	df 93       	push	r29
    18b8:	cf 93       	push	r28
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <LCD_Displaystring+0x6>
    18bc:	0f 92       	push	r0
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	9b 83       	std	Y+3, r25	; 0x03
    18c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    18c6:	19 82       	std	Y+1, r1	; 0x01
    18c8:	0e c0       	rjmp	.+28     	; 0x18e6 <LCD_Displaystring+0x30>
	while(c[i] != NULL)
	{
		LCD_DisplayCharacter(c[i]);
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	8a 81       	ldd	r24, Y+2	; 0x02
    18d2:	9b 81       	ldd	r25, Y+3	; 0x03
    18d4:	fc 01       	movw	r30, r24
    18d6:	e2 0f       	add	r30, r18
    18d8:	f3 1f       	adc	r31, r19
    18da:	80 81       	ld	r24, Z
    18dc:	0e 94 67 0a 	call	0x14ce	; 0x14ce <LCD_DisplayCharacter>
		i++;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_Displaystring(const u8 *c)
{
	u8 i = 0;
	while(c[i] != NULL)
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	fc 01       	movw	r30, r24
    18f2:	e2 0f       	add	r30, r18
    18f4:	f3 1f       	adc	r31, r19
    18f6:	80 81       	ld	r24, Z
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	29 f7       	brne	.-54     	; 0x18ca <LCD_Displaystring+0x14>
	{
		LCD_DisplayCharacter(c[i]);
		i++;
	}
}
    1900:	0f 90       	pop	r0
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <LCD_MoveCursor>:

void LCD_MoveCursor(u8 row, u8 col)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	00 d0       	rcall	.+0      	; 0x1912 <LCD_MoveCursor+0x6>
    1912:	00 d0       	rcall	.+0      	; 0x1914 <LCD_MoveCursor+0x8>
    1914:	0f 92       	push	r0
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	8a 83       	std	Y+2, r24	; 0x02
    191c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Mem_Adrs;
	switch(row)
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	3d 83       	std	Y+5, r19	; 0x05
    1926:	2c 83       	std	Y+4, r18	; 0x04
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	9d 81       	ldd	r25, Y+5	; 0x05
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	91 05       	cpc	r25, r1
    1930:	c1 f0       	breq	.+48     	; 0x1962 <LCD_MoveCursor+0x56>
    1932:	2c 81       	ldd	r18, Y+4	; 0x04
    1934:	3d 81       	ldd	r19, Y+5	; 0x05
    1936:	22 30       	cpi	r18, 0x02	; 2
    1938:	31 05       	cpc	r19, r1
    193a:	2c f4       	brge	.+10     	; 0x1946 <LCD_MoveCursor+0x3a>
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	61 f0       	breq	.+24     	; 0x195c <LCD_MoveCursor+0x50>
    1944:	19 c0       	rjmp	.+50     	; 0x1978 <LCD_MoveCursor+0x6c>
    1946:	2c 81       	ldd	r18, Y+4	; 0x04
    1948:	3d 81       	ldd	r19, Y+5	; 0x05
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	69 f0       	breq	.+26     	; 0x196a <LCD_MoveCursor+0x5e>
    1950:	8c 81       	ldd	r24, Y+4	; 0x04
    1952:	9d 81       	ldd	r25, Y+5	; 0x05
    1954:	83 30       	cpi	r24, 0x03	; 3
    1956:	91 05       	cpc	r25, r1
    1958:	61 f0       	breq	.+24     	; 0x1972 <LCD_MoveCursor+0x66>
    195a:	0e c0       	rjmp	.+28     	; 0x1978 <LCD_MoveCursor+0x6c>
	{
	case 0:
		Mem_Adrs = col;
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	89 83       	std	Y+1, r24	; 0x01
    1960:	0b c0       	rjmp	.+22     	; 0x1978 <LCD_MoveCursor+0x6c>
		break;
	case 1:
		Mem_Adrs = col + 0x40;
    1962:	8b 81       	ldd	r24, Y+3	; 0x03
    1964:	80 5c       	subi	r24, 0xC0	; 192
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <LCD_MoveCursor+0x6c>
		break;
	case 2:
		Mem_Adrs = col + 0x10;
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	80 5f       	subi	r24, 0xF0	; 240
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	03 c0       	rjmp	.+6      	; 0x1978 <LCD_MoveCursor+0x6c>
		break;
	case 3:
		Mem_Adrs = col + 0x50;
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	80 5b       	subi	r24, 0xB0	; 176
    1976:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(Mem_Adrs | LCD_Cursor_Location);
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	80 68       	ori	r24, 0x80	; 128
    197c:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_sendCommand>
}
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	08 95       	ret

00001990 <LCD_DispayStringRowColumn>:

void LCD_DispayStringRowColumn(const u8 * c, u8 row, u8 col)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <LCD_DispayStringRowColumn+0x6>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <LCD_DispayStringRowColumn+0x8>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	6b 83       	std	Y+3, r22	; 0x03
    19a2:	4c 83       	std	Y+4, r20	; 0x04
	LCD_MoveCursor(row,col);
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	6c 81       	ldd	r22, Y+4	; 0x04
    19a8:	0e 94 86 0c 	call	0x190c	; 0x190c <LCD_MoveCursor>
	LCD_Displaystring(c);
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	9a 81       	ldd	r25, Y+2	; 0x02
    19b0:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <LCD_Displaystring>
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <LCD_Clear>:

void LCD_Clear()
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_ClearScreen);
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	0e 94 73 08 	call	0x10e6	; 0x10e6 <LCD_sendCommand>
}
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <LCD_Int_to_Str>:

void LCD_Int_to_Str(int data)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	62 97       	sbiw	r28, 0x12	; 18
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	9a 8b       	std	Y+18, r25	; 0x12
    19ec:	89 8b       	std	Y+17, r24	; 0x11
	u8 buffer[16];
	itoa(data,buffer,10);
    19ee:	89 89       	ldd	r24, Y+17	; 0x11
    19f0:	9a 89       	ldd	r25, Y+18	; 0x12
    19f2:	9e 01       	movw	r18, r28
    19f4:	2f 5f       	subi	r18, 0xFF	; 255
    19f6:	3f 4f       	sbci	r19, 0xFF	; 255
    19f8:	b9 01       	movw	r22, r18
    19fa:	4a e0       	ldi	r20, 0x0A	; 10
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	0e 94 80 11 	call	0x2300	; 0x2300 <itoa>
	LCD_Displaystring(buffer);
    1a02:	ce 01       	movw	r24, r28
    1a04:	01 96       	adiw	r24, 0x01	; 1
    1a06:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <LCD_Displaystring>
}
    1a0a:	62 96       	adiw	r28, 0x12	; 18
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <GPIO_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setPinDirection(GPIO_PORT port, u8 pin, GPIO_directionType direction)
{
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <GPIO_setPinDirection+0x6>
    1a22:	00 d0       	rcall	.+0      	; 0x1a24 <GPIO_setPinDirection+0x8>
    1a24:	0f 92       	push	r0
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	89 83       	std	Y+1, r24	; 0x01
    1a2c:	6a 83       	std	Y+2, r22	; 0x02
    1a2e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin < NUM_OF_PINS_PER_PORT) || (port < NUM_OF_PORTS))
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	88 30       	cpi	r24, 0x08	; 8
    1a34:	20 f0       	brcs	.+8      	; 0x1a3e <GPIO_setPinDirection+0x22>
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <GPIO_setPinDirection+0x22>
    1a3c:	d1 c0       	rjmp	.+418    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
	{

		/* Setup the pin direction as required */
		switch(port)
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	3d 83       	std	Y+5, r19	; 0x05
    1a46:	2c 83       	std	Y+4, r18	; 0x04
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4c:	81 30       	cpi	r24, 0x01	; 1
    1a4e:	91 05       	cpc	r25, r1
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <GPIO_setPinDirection+0x38>
    1a52:	43 c0       	rjmp	.+134    	; 0x1ada <GPIO_setPinDirection+0xbe>
    1a54:	2c 81       	ldd	r18, Y+4	; 0x04
    1a56:	3d 81       	ldd	r19, Y+5	; 0x05
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <GPIO_setPinDirection+0x4c>
    1a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	00 97       	sbiw	r24, 0x00	; 0
    1a64:	71 f0       	breq	.+28     	; 0x1a82 <GPIO_setPinDirection+0x66>
    1a66:	bc c0       	rjmp	.+376    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
    1a68:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <GPIO_setPinDirection+0x58>
    1a72:	5f c0       	rjmp	.+190    	; 0x1b32 <GPIO_setPinDirection+0x116>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	83 30       	cpi	r24, 0x03	; 3
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	09 f4       	brne	.+2      	; 0x1a80 <GPIO_setPinDirection+0x64>
    1a7e:	85 c0       	rjmp	.+266    	; 0x1b8a <GPIO_setPinDirection+0x16e>
    1a80:	af c0       	rjmp	.+350    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
		{
		case A:
			if(direction == OUTPUT)
    1a82:	8b 81       	ldd	r24, Y+3	; 0x03
    1a84:	81 30       	cpi	r24, 0x01	; 1
    1a86:	a1 f4       	brne	.+40     	; 0x1ab0 <GPIO_setPinDirection+0x94>
			{
				SET_Bit(DDRA,pin);
    1a88:	aa e3       	ldi	r26, 0x3A	; 58
    1a8a:	b0 e0       	ldi	r27, 0x00	; 0
    1a8c:	ea e3       	ldi	r30, 0x3A	; 58
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 81       	ld	r24, Z
    1a92:	48 2f       	mov	r20, r24
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 2e       	mov	r0, r18
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <GPIO_setPinDirection+0x8a>
    1aa2:	88 0f       	add	r24, r24
    1aa4:	99 1f       	adc	r25, r25
    1aa6:	0a 94       	dec	r0
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <GPIO_setPinDirection+0x86>
    1aaa:	84 2b       	or	r24, r20
    1aac:	8c 93       	st	X, r24
    1aae:	98 c0       	rjmp	.+304    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRA,pin);
    1ab0:	aa e3       	ldi	r26, 0x3A	; 58
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	ea e3       	ldi	r30, 0x3A	; 58
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <GPIO_setPinDirection+0xb2>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <GPIO_setPinDirection+0xae>
    1ad2:	80 95       	com	r24
    1ad4:	84 23       	and	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	83 c0       	rjmp	.+262    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
			}
			break;
		case B:
			if(direction == OUTPUT)
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	a1 f4       	brne	.+40     	; 0x1b08 <GPIO_setPinDirection+0xec>
			{
				SET_Bit(DDRB,pin);
    1ae0:	a7 e3       	ldi	r26, 0x37	; 55
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e7 e3       	ldi	r30, 0x37	; 55
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	48 2f       	mov	r20, r24
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 2e       	mov	r0, r18
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <GPIO_setPinDirection+0xe2>
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	0a 94       	dec	r0
    1b00:	e2 f7       	brpl	.-8      	; 0x1afa <GPIO_setPinDirection+0xde>
    1b02:	84 2b       	or	r24, r20
    1b04:	8c 93       	st	X, r24
    1b06:	6c c0       	rjmp	.+216    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRB,pin);
    1b08:	a7 e3       	ldi	r26, 0x37	; 55
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	e7 e3       	ldi	r30, 0x37	; 55
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	48 2f       	mov	r20, r24
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <GPIO_setPinDirection+0x10a>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <GPIO_setPinDirection+0x106>
    1b2a:	80 95       	com	r24
    1b2c:	84 23       	and	r24, r20
    1b2e:	8c 93       	st	X, r24
    1b30:	57 c0       	rjmp	.+174    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
			}
			break;
		case C:
			if(direction == OUTPUT)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	a1 f4       	brne	.+40     	; 0x1b60 <GPIO_setPinDirection+0x144>
			{
				SET_Bit(DDRC,pin);
    1b38:	a4 e3       	ldi	r26, 0x34	; 52
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e4 e3       	ldi	r30, 0x34	; 52
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	48 2f       	mov	r20, r24
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	02 2e       	mov	r0, r18
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <GPIO_setPinDirection+0x13a>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	0a 94       	dec	r0
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <GPIO_setPinDirection+0x136>
    1b5a:	84 2b       	or	r24, r20
    1b5c:	8c 93       	st	X, r24
    1b5e:	40 c0       	rjmp	.+128    	; 0x1be0 <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRC,pin);
    1b60:	a4 e3       	ldi	r26, 0x34	; 52
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e4 e3       	ldi	r30, 0x34	; 52
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	02 2e       	mov	r0, r18
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <GPIO_setPinDirection+0x162>
    1b7a:	88 0f       	add	r24, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	0a 94       	dec	r0
    1b80:	e2 f7       	brpl	.-8      	; 0x1b7a <GPIO_setPinDirection+0x15e>
    1b82:	80 95       	com	r24
    1b84:	84 23       	and	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	2b c0       	rjmp	.+86     	; 0x1be0 <GPIO_setPinDirection+0x1c4>
			}
			break;
		case D:
			if(direction == OUTPUT)
    1b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	a1 f4       	brne	.+40     	; 0x1bb8 <GPIO_setPinDirection+0x19c>
			{
				SET_Bit(DDRD,pin);
    1b90:	a1 e3       	ldi	r26, 0x31	; 49
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e1 e3       	ldi	r30, 0x31	; 49
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 2e       	mov	r0, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <GPIO_setPinDirection+0x192>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	0a 94       	dec	r0
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <GPIO_setPinDirection+0x18e>
    1bb2:	84 2b       	or	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	14 c0       	rjmp	.+40     	; 0x1be0 <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRD,pin);
    1bb8:	a1 e3       	ldi	r26, 0x31	; 49
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e1 e3       	ldi	r30, 0x31	; 49
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <GPIO_setPinDirection+0x1ba>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <GPIO_setPinDirection+0x1b6>
    1bda:	80 95       	com	r24
    1bdc:	84 23       	and	r24, r20
    1bde:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(GPIO_PORT port, u8 pin, u8 value)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	00 d0       	rcall	.+0      	; 0x1bf6 <GPIO_writePin+0x6>
    1bf6:	00 d0       	rcall	.+0      	; 0x1bf8 <GPIO_writePin+0x8>
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	6a 83       	std	Y+2, r22	; 0x02
    1c02:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin < NUM_OF_PINS_PER_PORT) || (port < NUM_OF_PORTS))
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	88 30       	cpi	r24, 0x08	; 8
    1c08:	20 f0       	brcs	.+8      	; 0x1c12 <GPIO_writePin+0x22>
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	84 30       	cpi	r24, 0x04	; 4
    1c0e:	08 f0       	brcs	.+2      	; 0x1c12 <GPIO_writePin+0x22>
    1c10:	d1 c0       	rjmp	.+418    	; 0x1db4 <GPIO_writePin+0x1c4>
	{
		/* Write the pin value as required */
		switch(port)
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	3d 83       	std	Y+5, r19	; 0x05
    1c1a:	2c 83       	std	Y+4, r18	; 0x04
    1c1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c20:	81 30       	cpi	r24, 0x01	; 1
    1c22:	91 05       	cpc	r25, r1
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <GPIO_writePin+0x38>
    1c26:	43 c0       	rjmp	.+134    	; 0x1cae <GPIO_writePin+0xbe>
    1c28:	2c 81       	ldd	r18, Y+4	; 0x04
    1c2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c2c:	22 30       	cpi	r18, 0x02	; 2
    1c2e:	31 05       	cpc	r19, r1
    1c30:	2c f4       	brge	.+10     	; 0x1c3c <GPIO_writePin+0x4c>
    1c32:	8c 81       	ldd	r24, Y+4	; 0x04
    1c34:	9d 81       	ldd	r25, Y+5	; 0x05
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	71 f0       	breq	.+28     	; 0x1c56 <GPIO_writePin+0x66>
    1c3a:	bc c0       	rjmp	.+376    	; 0x1db4 <GPIO_writePin+0x1c4>
    1c3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	31 05       	cpc	r19, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <GPIO_writePin+0x58>
    1c46:	5f c0       	rjmp	.+190    	; 0x1d06 <GPIO_writePin+0x116>
    1c48:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1c4c:	83 30       	cpi	r24, 0x03	; 3
    1c4e:	91 05       	cpc	r25, r1
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <GPIO_writePin+0x64>
    1c52:	85 c0       	rjmp	.+266    	; 0x1d5e <GPIO_writePin+0x16e>
    1c54:	af c0       	rjmp	.+350    	; 0x1db4 <GPIO_writePin+0x1c4>
		{
		case A:
			if(value == High)
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	a1 f4       	brne	.+40     	; 0x1c84 <GPIO_writePin+0x94>
			{
				SET_Bit(PORTA,pin);
    1c5c:	ab e3       	ldi	r26, 0x3B	; 59
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	eb e3       	ldi	r30, 0x3B	; 59
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	48 2f       	mov	r20, r24
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	28 2f       	mov	r18, r24
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	02 2e       	mov	r0, r18
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <GPIO_writePin+0x8a>
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	0a 94       	dec	r0
    1c7c:	e2 f7       	brpl	.-8      	; 0x1c76 <GPIO_writePin+0x86>
    1c7e:	84 2b       	or	r24, r20
    1c80:	8c 93       	st	X, r24
    1c82:	98 c0       	rjmp	.+304    	; 0x1db4 <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTA,pin);
    1c84:	ab e3       	ldi	r26, 0x3B	; 59
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	eb e3       	ldi	r30, 0x3B	; 59
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	48 2f       	mov	r20, r24
    1c90:	8a 81       	ldd	r24, Y+2	; 0x02
    1c92:	28 2f       	mov	r18, r24
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	02 2e       	mov	r0, r18
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <GPIO_writePin+0xb2>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	0a 94       	dec	r0
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <GPIO_writePin+0xae>
    1ca6:	80 95       	com	r24
    1ca8:	84 23       	and	r24, r20
    1caa:	8c 93       	st	X, r24
    1cac:	83 c0       	rjmp	.+262    	; 0x1db4 <GPIO_writePin+0x1c4>
			}
			break;
		case B:
			if(value == High)
    1cae:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	a1 f4       	brne	.+40     	; 0x1cdc <GPIO_writePin+0xec>
			{
				SET_Bit(PORTB,pin);
    1cb4:	a8 e3       	ldi	r26, 0x38	; 56
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e8 e3       	ldi	r30, 0x38	; 56
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	48 2f       	mov	r20, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	28 2f       	mov	r18, r24
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 2e       	mov	r0, r18
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <GPIO_writePin+0xe2>
    1cce:	88 0f       	add	r24, r24
    1cd0:	99 1f       	adc	r25, r25
    1cd2:	0a 94       	dec	r0
    1cd4:	e2 f7       	brpl	.-8      	; 0x1cce <GPIO_writePin+0xde>
    1cd6:	84 2b       	or	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	6c c0       	rjmp	.+216    	; 0x1db4 <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTB,pin);
    1cdc:	a8 e3       	ldi	r26, 0x38	; 56
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e8 e3       	ldi	r30, 0x38	; 56
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	48 2f       	mov	r20, r24
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	02 2e       	mov	r0, r18
    1cf4:	02 c0       	rjmp	.+4      	; 0x1cfa <GPIO_writePin+0x10a>
    1cf6:	88 0f       	add	r24, r24
    1cf8:	99 1f       	adc	r25, r25
    1cfa:	0a 94       	dec	r0
    1cfc:	e2 f7       	brpl	.-8      	; 0x1cf6 <GPIO_writePin+0x106>
    1cfe:	80 95       	com	r24
    1d00:	84 23       	and	r24, r20
    1d02:	8c 93       	st	X, r24
    1d04:	57 c0       	rjmp	.+174    	; 0x1db4 <GPIO_writePin+0x1c4>
			}
			break;
		case C:
			if(value == High)
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	a1 f4       	brne	.+40     	; 0x1d34 <GPIO_writePin+0x144>
			{
				SET_Bit(PORTC,pin);
    1d0c:	a5 e3       	ldi	r26, 0x35	; 53
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	e5 e3       	ldi	r30, 0x35	; 53
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	48 2f       	mov	r20, r24
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	02 2e       	mov	r0, r18
    1d24:	02 c0       	rjmp	.+4      	; 0x1d2a <GPIO_writePin+0x13a>
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	0a 94       	dec	r0
    1d2c:	e2 f7       	brpl	.-8      	; 0x1d26 <GPIO_writePin+0x136>
    1d2e:	84 2b       	or	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	40 c0       	rjmp	.+128    	; 0x1db4 <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTC,pin);
    1d34:	a5 e3       	ldi	r26, 0x35	; 53
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e5 e3       	ldi	r30, 0x35	; 53
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	80 81       	ld	r24, Z
    1d3e:	48 2f       	mov	r20, r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	02 2e       	mov	r0, r18
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <GPIO_writePin+0x162>
    1d4e:	88 0f       	add	r24, r24
    1d50:	99 1f       	adc	r25, r25
    1d52:	0a 94       	dec	r0
    1d54:	e2 f7       	brpl	.-8      	; 0x1d4e <GPIO_writePin+0x15e>
    1d56:	80 95       	com	r24
    1d58:	84 23       	and	r24, r20
    1d5a:	8c 93       	st	X, r24
    1d5c:	2b c0       	rjmp	.+86     	; 0x1db4 <GPIO_writePin+0x1c4>
			}
			break;
		case D:
			if(value == High)
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	81 30       	cpi	r24, 0x01	; 1
    1d62:	a1 f4       	brne	.+40     	; 0x1d8c <GPIO_writePin+0x19c>
			{
				SET_Bit(PORTD,pin);
    1d64:	a2 e3       	ldi	r26, 0x32	; 50
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e2 e3       	ldi	r30, 0x32	; 50
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <GPIO_writePin+0x192>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <GPIO_writePin+0x18e>
    1d86:	84 2b       	or	r24, r20
    1d88:	8c 93       	st	X, r24
    1d8a:	14 c0       	rjmp	.+40     	; 0x1db4 <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTD,pin);
    1d8c:	a2 e3       	ldi	r26, 0x32	; 50
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e2 e3       	ldi	r30, 0x32	; 50
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <GPIO_writePin+0x1ba>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <GPIO_writePin+0x1b6>
    1dae:	80 95       	com	r24
    1db0:	84 23       	and	r24, r20
    1db2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 GPIO_readPin(GPIO_PORT port, u8 pin)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	00 d0       	rcall	.+0      	; 0x1dca <GPIO_readPin+0x6>
    1dca:	00 d0       	rcall	.+0      	; 0x1dcc <GPIO_readPin+0x8>
    1dcc:	0f 92       	push	r0
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	8a 83       	std	Y+2, r24	; 0x02
    1dd4:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = Low;
    1dd6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin < NUM_OF_PINS_PER_PORT) || (port < NUM_OF_PORTS))
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	88 30       	cpi	r24, 0x08	; 8
    1ddc:	20 f0       	brcs	.+8      	; 0x1de6 <GPIO_readPin+0x22>
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	84 30       	cpi	r24, 0x04	; 4
    1de2:	08 f0       	brcs	.+2      	; 0x1de6 <GPIO_readPin+0x22>
    1de4:	80 c0       	rjmp	.+256    	; 0x1ee6 <GPIO_readPin+0x122>
	{
		/* Read the pin value as required */
		switch(port)
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3d 83       	std	Y+5, r19	; 0x05
    1dee:	2c 83       	std	Y+4, r18	; 0x04
    1df0:	4c 81       	ldd	r20, Y+4	; 0x04
    1df2:	5d 81       	ldd	r21, Y+5	; 0x05
    1df4:	41 30       	cpi	r20, 0x01	; 1
    1df6:	51 05       	cpc	r21, r1
    1df8:	79 f1       	breq	.+94     	; 0x1e58 <GPIO_readPin+0x94>
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	91 05       	cpc	r25, r1
    1e02:	34 f4       	brge	.+12     	; 0x1e10 <GPIO_readPin+0x4c>
    1e04:	2c 81       	ldd	r18, Y+4	; 0x04
    1e06:	3d 81       	ldd	r19, Y+5	; 0x05
    1e08:	21 15       	cp	r18, r1
    1e0a:	31 05       	cpc	r19, r1
    1e0c:	69 f0       	breq	.+26     	; 0x1e28 <GPIO_readPin+0x64>
    1e0e:	6b c0       	rjmp	.+214    	; 0x1ee6 <GPIO_readPin+0x122>
    1e10:	4c 81       	ldd	r20, Y+4	; 0x04
    1e12:	5d 81       	ldd	r21, Y+5	; 0x05
    1e14:	42 30       	cpi	r20, 0x02	; 2
    1e16:	51 05       	cpc	r21, r1
    1e18:	b9 f1       	breq	.+110    	; 0x1e88 <GPIO_readPin+0xc4>
    1e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1e:	83 30       	cpi	r24, 0x03	; 3
    1e20:	91 05       	cpc	r25, r1
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <GPIO_readPin+0x62>
    1e24:	49 c0       	rjmp	.+146    	; 0x1eb8 <GPIO_readPin+0xf4>
    1e26:	5f c0       	rjmp	.+190    	; 0x1ee6 <GPIO_readPin+0x122>
		{
		case A:
			if(isSET(PINA,pin))
    1e28:	e9 e3       	ldi	r30, 0x39	; 57
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a9 01       	movw	r20, r18
    1e3a:	02 c0       	rjmp	.+4      	; 0x1e40 <GPIO_readPin+0x7c>
    1e3c:	55 95       	asr	r21
    1e3e:	47 95       	ror	r20
    1e40:	8a 95       	dec	r24
    1e42:	e2 f7       	brpl	.-8      	; 0x1e3c <GPIO_readPin+0x78>
    1e44:	ca 01       	movw	r24, r20
    1e46:	81 70       	andi	r24, 0x01	; 1
    1e48:	90 70       	andi	r25, 0x00	; 0
    1e4a:	88 23       	and	r24, r24
    1e4c:	19 f0       	breq	.+6      	; 0x1e54 <GPIO_readPin+0x90>
			{
				pin_value = High;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01
    1e52:	49 c0       	rjmp	.+146    	; 0x1ee6 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	47 c0       	rjmp	.+142    	; 0x1ee6 <GPIO_readPin+0x122>
			}
			break;
		case B:
			if(isSET(PINB,pin))
    1e58:	e6 e3       	ldi	r30, 0x36	; 54
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	8b 81       	ldd	r24, Y+3	; 0x03
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a9 01       	movw	r20, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_readPin+0xac>
    1e6c:	55 95       	asr	r21
    1e6e:	47 95       	ror	r20
    1e70:	8a 95       	dec	r24
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_readPin+0xa8>
    1e74:	ca 01       	movw	r24, r20
    1e76:	81 70       	andi	r24, 0x01	; 1
    1e78:	90 70       	andi	r25, 0x00	; 0
    1e7a:	88 23       	and	r24, r24
    1e7c:	19 f0       	breq	.+6      	; 0x1e84 <GPIO_readPin+0xc0>
			{
				pin_value = High;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	31 c0       	rjmp	.+98     	; 0x1ee6 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1e84:	19 82       	std	Y+1, r1	; 0x01
    1e86:	2f c0       	rjmp	.+94     	; 0x1ee6 <GPIO_readPin+0x122>
			}
			break;
		case C:
			if(isSET(PINC,pin))
    1e88:	e3 e3       	ldi	r30, 0x33	; 51
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	28 2f       	mov	r18, r24
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	8b 81       	ldd	r24, Y+3	; 0x03
    1e94:	88 2f       	mov	r24, r24
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	a9 01       	movw	r20, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_readPin+0xdc>
    1e9c:	55 95       	asr	r21
    1e9e:	47 95       	ror	r20
    1ea0:	8a 95       	dec	r24
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_readPin+0xd8>
    1ea4:	ca 01       	movw	r24, r20
    1ea6:	81 70       	andi	r24, 0x01	; 1
    1ea8:	90 70       	andi	r25, 0x00	; 0
    1eaa:	88 23       	and	r24, r24
    1eac:	19 f0       	breq	.+6      	; 0x1eb4 <GPIO_readPin+0xf0>
			{
				pin_value = High;
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	89 83       	std	Y+1, r24	; 0x01
    1eb2:	19 c0       	rjmp	.+50     	; 0x1ee6 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1eb4:	19 82       	std	Y+1, r1	; 0x01
    1eb6:	17 c0       	rjmp	.+46     	; 0x1ee6 <GPIO_readPin+0x122>
			}
			break;
		case D:
			if(isSET(PIND,pin))
    1eb8:	e0 e3       	ldi	r30, 0x30	; 48
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <GPIO_readPin+0x10c>
    1ecc:	55 95       	asr	r21
    1ece:	47 95       	ror	r20
    1ed0:	8a 95       	dec	r24
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <GPIO_readPin+0x108>
    1ed4:	ca 01       	movw	r24, r20
    1ed6:	81 70       	andi	r24, 0x01	; 1
    1ed8:	90 70       	andi	r25, 0x00	; 0
    1eda:	88 23       	and	r24, r24
    1edc:	19 f0       	breq	.+6      	; 0x1ee4 <GPIO_readPin+0x120>
			{
				pin_value = High;
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	01 c0       	rjmp	.+2      	; 0x1ee6 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1ee4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	cf 91       	pop	r28
    1ef4:	df 91       	pop	r29
    1ef6:	08 95       	ret

00001ef8 <GPIO_setPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setPortDirection(GPIO_PORT port, GPIO_directionType direction)
{
    1ef8:	df 93       	push	r29
    1efa:	cf 93       	push	r28
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <GPIO_setPortDirection+0x6>
    1efe:	00 d0       	rcall	.+0      	; 0x1f00 <GPIO_setPortDirection+0x8>
    1f00:	cd b7       	in	r28, 0x3d	; 61
    1f02:	de b7       	in	r29, 0x3e	; 62
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port < NUM_OF_PORTS)
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	84 30       	cpi	r24, 0x04	; 4
    1f0c:	90 f5       	brcc	.+100    	; 0x1f72 <GPIO_setPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port)
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	3c 83       	std	Y+4, r19	; 0x04
    1f16:	2b 83       	std	Y+3, r18	; 0x03
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1c:	81 30       	cpi	r24, 0x01	; 1
    1f1e:	91 05       	cpc	r25, r1
    1f20:	d1 f0       	breq	.+52     	; 0x1f56 <GPIO_setPortDirection+0x5e>
    1f22:	2b 81       	ldd	r18, Y+3	; 0x03
    1f24:	3c 81       	ldd	r19, Y+4	; 0x04
    1f26:	22 30       	cpi	r18, 0x02	; 2
    1f28:	31 05       	cpc	r19, r1
    1f2a:	2c f4       	brge	.+10     	; 0x1f36 <GPIO_setPortDirection+0x3e>
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <GPIO_setPortDirection+0x54>
    1f34:	1e c0       	rjmp	.+60     	; 0x1f72 <GPIO_setPortDirection+0x7a>
    1f36:	2b 81       	ldd	r18, Y+3	; 0x03
    1f38:	3c 81       	ldd	r19, Y+4	; 0x04
    1f3a:	22 30       	cpi	r18, 0x02	; 2
    1f3c:	31 05       	cpc	r19, r1
    1f3e:	81 f0       	breq	.+32     	; 0x1f60 <GPIO_setPortDirection+0x68>
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	83 30       	cpi	r24, 0x03	; 3
    1f46:	91 05       	cpc	r25, r1
    1f48:	81 f0       	breq	.+32     	; 0x1f6a <GPIO_setPortDirection+0x72>
    1f4a:	13 c0       	rjmp	.+38     	; 0x1f72 <GPIO_setPortDirection+0x7a>
		{
		case A:
			DDRA = 0xFF;
    1f4c:	ea e3       	ldi	r30, 0x3A	; 58
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	8f ef       	ldi	r24, 0xFF	; 255
    1f52:	80 83       	st	Z, r24
    1f54:	0e c0       	rjmp	.+28     	; 0x1f72 <GPIO_setPortDirection+0x7a>
			break;
		case B:
			DDRB = 0xFF;
    1f56:	e7 e3       	ldi	r30, 0x37	; 55
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	8f ef       	ldi	r24, 0xFF	; 255
    1f5c:	80 83       	st	Z, r24
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <GPIO_setPortDirection+0x7a>
			break;
		case C:
			DDRC = 0xFF;
    1f60:	e4 e3       	ldi	r30, 0x34	; 52
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	8f ef       	ldi	r24, 0xFF	; 255
    1f66:	80 83       	st	Z, r24
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <GPIO_setPortDirection+0x7a>
			break;
		case D:
			DDRD = 0xFF;
    1f6a:	e1 e3       	ldi	r30, 0x31	; 49
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	8f ef       	ldi	r24, 0xFF	; 255
    1f70:	80 83       	st	Z, r24
			break;
		}
	}
}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
    1f78:	0f 90       	pop	r0
    1f7a:	cf 91       	pop	r28
    1f7c:	df 91       	pop	r29
    1f7e:	08 95       	ret

00001f80 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(GPIO_PORT port, u8 value)
{
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <GPIO_writePort+0x6>
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <GPIO_writePort+0x8>
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	89 83       	std	Y+1, r24	; 0x01
    1f8e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port < NUM_OF_PORTS)
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	84 30       	cpi	r24, 0x04	; 4
    1f94:	90 f5       	brcc	.+100    	; 0x1ffa <GPIO_writePort+0x7a>
	{
		/* Write the port value as required */
		switch(port)
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	3c 83       	std	Y+4, r19	; 0x04
    1f9e:	2b 83       	std	Y+3, r18	; 0x03
    1fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa4:	81 30       	cpi	r24, 0x01	; 1
    1fa6:	91 05       	cpc	r25, r1
    1fa8:	d1 f0       	breq	.+52     	; 0x1fde <GPIO_writePort+0x5e>
    1faa:	2b 81       	ldd	r18, Y+3	; 0x03
    1fac:	3c 81       	ldd	r19, Y+4	; 0x04
    1fae:	22 30       	cpi	r18, 0x02	; 2
    1fb0:	31 05       	cpc	r19, r1
    1fb2:	2c f4       	brge	.+10     	; 0x1fbe <GPIO_writePort+0x3e>
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	61 f0       	breq	.+24     	; 0x1fd4 <GPIO_writePort+0x54>
    1fbc:	1e c0       	rjmp	.+60     	; 0x1ffa <GPIO_writePort+0x7a>
    1fbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1fc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc2:	22 30       	cpi	r18, 0x02	; 2
    1fc4:	31 05       	cpc	r19, r1
    1fc6:	81 f0       	breq	.+32     	; 0x1fe8 <GPIO_writePort+0x68>
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	9c 81       	ldd	r25, Y+4	; 0x04
    1fcc:	83 30       	cpi	r24, 0x03	; 3
    1fce:	91 05       	cpc	r25, r1
    1fd0:	81 f0       	breq	.+32     	; 0x1ff2 <GPIO_writePort+0x72>
    1fd2:	13 c0       	rjmp	.+38     	; 0x1ffa <GPIO_writePort+0x7a>
		{
		case A:
			PORTA = value;
    1fd4:	eb e3       	ldi	r30, 0x3B	; 59
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	80 83       	st	Z, r24
    1fdc:	0e c0       	rjmp	.+28     	; 0x1ffa <GPIO_writePort+0x7a>
			break;
		case B:
			PORTB = value;
    1fde:	e8 e3       	ldi	r30, 0x38	; 56
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe4:	80 83       	st	Z, r24
    1fe6:	09 c0       	rjmp	.+18     	; 0x1ffa <GPIO_writePort+0x7a>
			break;
		case C:
			PORTC = value;
    1fe8:	e5 e3       	ldi	r30, 0x35	; 53
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	80 83       	st	Z, r24
    1ff0:	04 c0       	rjmp	.+8      	; 0x1ffa <GPIO_writePort+0x7a>
			break;
		case D:
			PORTD = value;
    1ff2:	e2 e3       	ldi	r30, 0x32	; 50
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_readPort(GPIO_PORT port)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <GPIO_readPort+0x6>
    200e:	00 d0       	rcall	.+0      	; 0x2010 <GPIO_readPort+0x8>
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = Low;
    2016:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port < NUM_OF_PORTS)
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	90 f5       	brcc	.+100    	; 0x2082 <GPIO_readPort+0x7a>
	{
		/* Read the port value as required */
		switch(port)
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	3c 83       	std	Y+4, r19	; 0x04
    2026:	2b 83       	std	Y+3, r18	; 0x03
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	9c 81       	ldd	r25, Y+4	; 0x04
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	91 05       	cpc	r25, r1
    2030:	d1 f0       	breq	.+52     	; 0x2066 <GPIO_readPort+0x5e>
    2032:	2b 81       	ldd	r18, Y+3	; 0x03
    2034:	3c 81       	ldd	r19, Y+4	; 0x04
    2036:	22 30       	cpi	r18, 0x02	; 2
    2038:	31 05       	cpc	r19, r1
    203a:	2c f4       	brge	.+10     	; 0x2046 <GPIO_readPort+0x3e>
    203c:	8b 81       	ldd	r24, Y+3	; 0x03
    203e:	9c 81       	ldd	r25, Y+4	; 0x04
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	61 f0       	breq	.+24     	; 0x205c <GPIO_readPort+0x54>
    2044:	1e c0       	rjmp	.+60     	; 0x2082 <GPIO_readPort+0x7a>
    2046:	2b 81       	ldd	r18, Y+3	; 0x03
    2048:	3c 81       	ldd	r19, Y+4	; 0x04
    204a:	22 30       	cpi	r18, 0x02	; 2
    204c:	31 05       	cpc	r19, r1
    204e:	81 f0       	breq	.+32     	; 0x2070 <GPIO_readPort+0x68>
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	83 30       	cpi	r24, 0x03	; 3
    2056:	91 05       	cpc	r25, r1
    2058:	81 f0       	breq	.+32     	; 0x207a <GPIO_readPort+0x72>
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <GPIO_readPort+0x7a>
		{
		case A:
			value = PINA;
    205c:	e9 e3       	ldi	r30, 0x39	; 57
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	0e c0       	rjmp	.+28     	; 0x2082 <GPIO_readPort+0x7a>
			break;
		case B:
			value = PINB;
    2066:	e6 e3       	ldi	r30, 0x36	; 54
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	09 c0       	rjmp	.+18     	; 0x2082 <GPIO_readPort+0x7a>
			break;
		case C:
			value = PINC;
    2070:	e3 e3       	ldi	r30, 0x33	; 51
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	89 83       	std	Y+1, r24	; 0x01
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <GPIO_readPort+0x7a>
			break;
		case D:
			value = PIND;
    207a:	e0 e3       	ldi	r30, 0x30	; 48
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2082:	89 81       	ldd	r24, Y+1	; 0x01
}
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <__vector_5>:
/***********************************************************
 *                     ISR                                 *
 **********************************************************/

ISR(TIMER1_CAPT_vect)
{
    2092:	1f 92       	push	r1
    2094:	0f 92       	push	r0
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	0f 92       	push	r0
    209a:	11 24       	eor	r1, r1
    209c:	2f 93       	push	r18
    209e:	3f 93       	push	r19
    20a0:	4f 93       	push	r20
    20a2:	5f 93       	push	r21
    20a4:	6f 93       	push	r22
    20a6:	7f 93       	push	r23
    20a8:	8f 93       	push	r24
    20aa:	9f 93       	push	r25
    20ac:	af 93       	push	r26
    20ae:	bf 93       	push	r27
    20b0:	ef 93       	push	r30
    20b2:	ff 93       	push	r31
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBack != NULL)
    20bc:	80 91 7c 01 	lds	r24, 0x017C
    20c0:	90 91 7d 01 	lds	r25, 0x017D
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	29 f0       	breq	.+10     	; 0x20d2 <__vector_5+0x40>
	{
		/* if the call back function is not NULL then Call it*/
		(*ICU_CallBack)();
    20c8:	e0 91 7c 01 	lds	r30, 0x017C
    20cc:	f0 91 7d 01 	lds	r31, 0x017D
    20d0:	09 95       	icall
	}
}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	ff 91       	pop	r31
    20d8:	ef 91       	pop	r30
    20da:	bf 91       	pop	r27
    20dc:	af 91       	pop	r26
    20de:	9f 91       	pop	r25
    20e0:	8f 91       	pop	r24
    20e2:	7f 91       	pop	r23
    20e4:	6f 91       	pop	r22
    20e6:	5f 91       	pop	r21
    20e8:	4f 91       	pop	r20
    20ea:	3f 91       	pop	r19
    20ec:	2f 91       	pop	r18
    20ee:	0f 90       	pop	r0
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	0f 90       	pop	r0
    20f4:	1f 90       	pop	r1
    20f6:	18 95       	reti

000020f8 <ICU_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ICU_Init(const ICU_Config * Config_Ptr)
{
    20f8:	df 93       	push	r29
    20fa:	cf 93       	push	r28
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <ICU_Init+0x6>
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	9a 83       	std	Y+2, r25	; 0x02
    2104:	89 83       	std	Y+1, r24	; 0x01
	/* Set ICP1/PD6 as Input */
	GPIO_setPinDirection(D, PIN6, INPUT);
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	66 e0       	ldi	r22, 0x06	; 6
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <GPIO_setPinDirection>

	/* Operating in normal mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2110:	ef e4       	ldi	r30, 0x4F	; 79
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	8c e0       	ldi	r24, 0x0C	; 12
    2116:	80 83       	st	Z, r24

	/*Set the CLock*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    2118:	ae e4       	ldi	r26, 0x4E	; 78
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	ee e4       	ldi	r30, 0x4E	; 78
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	98 2f       	mov	r25, r24
    2124:	98 7f       	andi	r25, 0xF8	; 248
    2126:	e9 81       	ldd	r30, Y+1	; 0x01
    2128:	fa 81       	ldd	r31, Y+2	; 0x02
    212a:	80 81       	ld	r24, Z
    212c:	89 2b       	or	r24, r25
    212e:	8c 93       	st	X, r24

	/*Set the required edge either RISING of FALLING*/
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    2130:	ae e4       	ldi	r26, 0x4E	; 78
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	ee e4       	ldi	r30, 0x4E	; 78
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	28 2f       	mov	r18, r24
    213c:	2f 7b       	andi	r18, 0xBF	; 191
    213e:	e9 81       	ldd	r30, Y+1	; 0x01
    2140:	fa 81       	ldd	r31, Y+2	; 0x02
    2142:	81 81       	ldd	r24, Z+1	; 0x01
    2144:	88 2f       	mov	r24, r24
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	00 24       	eor	r0, r0
    214a:	96 95       	lsr	r25
    214c:	87 95       	ror	r24
    214e:	07 94       	ror	r0
    2150:	96 95       	lsr	r25
    2152:	87 95       	ror	r24
    2154:	07 94       	ror	r0
    2156:	98 2f       	mov	r25, r24
    2158:	80 2d       	mov	r24, r0
    215a:	82 2b       	or	r24, r18
    215c:	8c 93       	st	X, r24

	/*Set timer to zero*/
	TCNT1 = 0;
    215e:	ec e4       	ldi	r30, 0x4C	; 76
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	11 82       	std	Z+1, r1	; 0x01
    2164:	10 82       	st	Z, r1

	/*Set capture unit to zero*/
	ICR1 = 0;
    2166:	e6 e4       	ldi	r30, 0x46	; 70
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	11 82       	std	Z+1, r1	; 0x01
    216c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	SET_Bit(TIMSK, TICIE1);
    216e:	a9 e5       	ldi	r26, 0x59	; 89
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e9 e5       	ldi	r30, 0x59	; 89
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	80 62       	ori	r24, 0x20	; 32
    217a:	8c 93       	st	X, r24
}
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <ICU_setCallBack>:

void ICU_setCallBack(void(*PtrToFunction)(void))
{
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	00 d0       	rcall	.+0      	; 0x218c <ICU_setCallBack+0x6>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
	/*Set address of the call back function*/
	ICU_CallBack = PtrToFunction;
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	90 93 7d 01 	sts	0x017D, r25
    219c:	80 93 7c 01 	sts	0x017C, r24
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <ICU_setEdgeDetection>:

void ICU_setEdgeDetection(const ICU_Edge edgeType)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	89 83       	std	Y+1, r24	; 0x01
	/*Set the edge required to be captured*/
	TCCR1B = (TCCR1B & 0xBF) | (edgeType<<6);
    21b6:	ae e4       	ldi	r26, 0x4E	; 78
    21b8:	b0 e0       	ldi	r27, 0x00	; 0
    21ba:	ee e4       	ldi	r30, 0x4E	; 78
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	28 2f       	mov	r18, r24
    21c2:	2f 7b       	andi	r18, 0xBF	; 191
    21c4:	89 81       	ldd	r24, Y+1	; 0x01
    21c6:	88 2f       	mov	r24, r24
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	00 24       	eor	r0, r0
    21cc:	96 95       	lsr	r25
    21ce:	87 95       	ror	r24
    21d0:	07 94       	ror	r0
    21d2:	96 95       	lsr	r25
    21d4:	87 95       	ror	r24
    21d6:	07 94       	ror	r0
    21d8:	98 2f       	mov	r25, r24
    21da:	80 2d       	mov	r24, r0
    21dc:	82 2b       	or	r24, r18
    21de:	8c 93       	st	X, r24
}
    21e0:	0f 90       	pop	r0
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <ICU_getInputCapture>:

u16 ICU_getInputCapture(void)
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    21f0:	e6 e4       	ldi	r30, 0x46	; 70
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	91 81       	ldd	r25, Z+1	; 0x01
}
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <ICU_clearTimer>:

void ICU_clearTimer(void)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2206:	ec e4       	ldi	r30, 0x4C	; 76
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	11 82       	std	Z+1, r1	; 0x01
    220c:	10 82       	st	Z, r1
}
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <ICU_DeInit>:

void ICU_DeInit(void)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    221c:	ef e4       	ldi	r30, 0x4F	; 79
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	10 82       	st	Z, r1
	TCCR1B = 0;
    2222:	ee e4       	ldi	r30, 0x4E	; 78
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	10 82       	st	Z, r1
	TCNT1 = 0;
    2228:	ec e4       	ldi	r30, 0x4C	; 76
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	11 82       	std	Z+1, r1	; 0x01
    222e:	10 82       	st	Z, r1
	ICR1 = 0;
    2230:	e6 e4       	ldi	r30, 0x46	; 70
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	11 82       	std	Z+1, r1	; 0x01
    2236:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLR_Bit(TIMSK, TICIE1);
    2238:	a9 e5       	ldi	r26, 0x59	; 89
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e9 e5       	ldi	r30, 0x59	; 89
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 7d       	andi	r24, 0xDF	; 223
    2244:	8c 93       	st	X, r24
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <main>:
#include "LCD/LCD.h"
#include "avr/interrupt.h"


int main()
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	00 d0       	rcall	.+0      	; 0x2252 <main+0x6>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	/*Define Variable that will contain the value returned by the
	 * Ultrasonic_readDistance function*/
	u16 dist = 0;
    2256:	1a 82       	std	Y+2, r1	; 0x02
    2258:	19 82       	std	Y+1, r1	; 0x01

	/*Set the global Interrupt*/
	SREG |= (1<<7);
    225a:	af e5       	ldi	r26, 0x5F	; 95
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	ef e5       	ldi	r30, 0x5F	; 95
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	80 68       	ori	r24, 0x80	; 128
    2266:	8c 93       	st	X, r24

	/*Initialize the LCD to power on */
	LCD_init();
    2268:	0e 94 50 08 	call	0x10a0	; 0x10a0 <LCD_init>

	/*Initialize the Ultrasonic to read distance*/
	Ultrasonic_Init();
    226c:	0e 94 f8 07 	call	0xff0	; 0xff0 <Ultrasonic_Init>

	/*Display string*/
	LCD_Displaystring("Distance= ");
    2270:	80 e6       	ldi	r24, 0x60	; 96
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <LCD_Displaystring>

	/*Function the reads the distance and return the value to the distance variable*/
	dist = Ultrasonic_readDistance();
    2278:	0e 94 13 08 	call	0x1026	; 0x1026 <Ultrasonic_readDistance>
    227c:	9a 83       	std	Y+2, r25	; 0x02
    227e:	89 83       	std	Y+1, r24	; 0x01

	/*Display the value on the LCD*/
	LCD_Int_to_Str(dist);
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <LCD_Int_to_Str>

	LCD_Displaystring(" cm");
    2288:	8b e6       	ldi	r24, 0x6B	; 107
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <LCD_Displaystring>
    2290:	ff cf       	rjmp	.-2      	; 0x2290 <main+0x44>

00002292 <__prologue_saves__>:
    2292:	2f 92       	push	r2
    2294:	3f 92       	push	r3
    2296:	4f 92       	push	r4
    2298:	5f 92       	push	r5
    229a:	6f 92       	push	r6
    229c:	7f 92       	push	r7
    229e:	8f 92       	push	r8
    22a0:	9f 92       	push	r9
    22a2:	af 92       	push	r10
    22a4:	bf 92       	push	r11
    22a6:	cf 92       	push	r12
    22a8:	df 92       	push	r13
    22aa:	ef 92       	push	r14
    22ac:	ff 92       	push	r15
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	ca 1b       	sub	r28, r26
    22bc:	db 0b       	sbc	r29, r27
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	09 94       	ijmp

000022ca <__epilogue_restores__>:
    22ca:	2a 88       	ldd	r2, Y+18	; 0x12
    22cc:	39 88       	ldd	r3, Y+17	; 0x11
    22ce:	48 88       	ldd	r4, Y+16	; 0x10
    22d0:	5f 84       	ldd	r5, Y+15	; 0x0f
    22d2:	6e 84       	ldd	r6, Y+14	; 0x0e
    22d4:	7d 84       	ldd	r7, Y+13	; 0x0d
    22d6:	8c 84       	ldd	r8, Y+12	; 0x0c
    22d8:	9b 84       	ldd	r9, Y+11	; 0x0b
    22da:	aa 84       	ldd	r10, Y+10	; 0x0a
    22dc:	b9 84       	ldd	r11, Y+9	; 0x09
    22de:	c8 84       	ldd	r12, Y+8	; 0x08
    22e0:	df 80       	ldd	r13, Y+7	; 0x07
    22e2:	ee 80       	ldd	r14, Y+6	; 0x06
    22e4:	fd 80       	ldd	r15, Y+5	; 0x05
    22e6:	0c 81       	ldd	r16, Y+4	; 0x04
    22e8:	1b 81       	ldd	r17, Y+3	; 0x03
    22ea:	aa 81       	ldd	r26, Y+2	; 0x02
    22ec:	b9 81       	ldd	r27, Y+1	; 0x01
    22ee:	ce 0f       	add	r28, r30
    22f0:	d1 1d       	adc	r29, r1
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	ed 01       	movw	r28, r26
    22fe:	08 95       	ret

00002300 <itoa>:
    2300:	fb 01       	movw	r30, r22
    2302:	9f 01       	movw	r18, r30
    2304:	e8 94       	clt
    2306:	42 30       	cpi	r20, 0x02	; 2
    2308:	c4 f0       	brlt	.+48     	; 0x233a <itoa+0x3a>
    230a:	45 32       	cpi	r20, 0x25	; 37
    230c:	b4 f4       	brge	.+44     	; 0x233a <itoa+0x3a>
    230e:	4a 30       	cpi	r20, 0x0A	; 10
    2310:	29 f4       	brne	.+10     	; 0x231c <itoa+0x1c>
    2312:	97 fb       	bst	r25, 7
    2314:	1e f4       	brtc	.+6      	; 0x231c <itoa+0x1c>
    2316:	90 95       	com	r25
    2318:	81 95       	neg	r24
    231a:	9f 4f       	sbci	r25, 0xFF	; 255
    231c:	64 2f       	mov	r22, r20
    231e:	77 27       	eor	r23, r23
    2320:	0e 94 b1 11 	call	0x2362	; 0x2362 <__udivmodhi4>
    2324:	80 5d       	subi	r24, 0xD0	; 208
    2326:	8a 33       	cpi	r24, 0x3A	; 58
    2328:	0c f0       	brlt	.+2      	; 0x232c <itoa+0x2c>
    232a:	89 5d       	subi	r24, 0xD9	; 217
    232c:	81 93       	st	Z+, r24
    232e:	cb 01       	movw	r24, r22
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	a1 f7       	brne	.-24     	; 0x231c <itoa+0x1c>
    2334:	16 f4       	brtc	.+4      	; 0x233a <itoa+0x3a>
    2336:	5d e2       	ldi	r21, 0x2D	; 45
    2338:	51 93       	st	Z+, r21
    233a:	10 82       	st	Z, r1
    233c:	c9 01       	movw	r24, r18
    233e:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <strrev>

00002342 <strrev>:
    2342:	dc 01       	movw	r26, r24
    2344:	fc 01       	movw	r30, r24
    2346:	67 2f       	mov	r22, r23
    2348:	71 91       	ld	r23, Z+
    234a:	77 23       	and	r23, r23
    234c:	e1 f7       	brne	.-8      	; 0x2346 <strrev+0x4>
    234e:	32 97       	sbiw	r30, 0x02	; 2
    2350:	04 c0       	rjmp	.+8      	; 0x235a <strrev+0x18>
    2352:	7c 91       	ld	r23, X
    2354:	6d 93       	st	X+, r22
    2356:	70 83       	st	Z, r23
    2358:	62 91       	ld	r22, -Z
    235a:	ae 17       	cp	r26, r30
    235c:	bf 07       	cpc	r27, r31
    235e:	c8 f3       	brcs	.-14     	; 0x2352 <strrev+0x10>
    2360:	08 95       	ret

00002362 <__udivmodhi4>:
    2362:	aa 1b       	sub	r26, r26
    2364:	bb 1b       	sub	r27, r27
    2366:	51 e1       	ldi	r21, 0x11	; 17
    2368:	07 c0       	rjmp	.+14     	; 0x2378 <__udivmodhi4_ep>

0000236a <__udivmodhi4_loop>:
    236a:	aa 1f       	adc	r26, r26
    236c:	bb 1f       	adc	r27, r27
    236e:	a6 17       	cp	r26, r22
    2370:	b7 07       	cpc	r27, r23
    2372:	10 f0       	brcs	.+4      	; 0x2378 <__udivmodhi4_ep>
    2374:	a6 1b       	sub	r26, r22
    2376:	b7 0b       	sbc	r27, r23

00002378 <__udivmodhi4_ep>:
    2378:	88 1f       	adc	r24, r24
    237a:	99 1f       	adc	r25, r25
    237c:	5a 95       	dec	r21
    237e:	a9 f7       	brne	.-22     	; 0x236a <__udivmodhi4_loop>
    2380:	80 95       	com	r24
    2382:	90 95       	com	r25
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	08 95       	ret

0000238a <_exit>:
    238a:	f8 94       	cli

0000238c <__stop_program>:
    238c:	ff cf       	rjmp	.-2      	; 0x238c <__stop_program>
