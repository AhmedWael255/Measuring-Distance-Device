
Ultrasonic_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000221c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000221c  000022b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800074  00800074  000022c4  2**0
                  ALLOC
  3 .stab         00001f5c  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001195  00000000  00000000  00004220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000053b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005515  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000056a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000076e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000087ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000976c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  000098ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a43c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e1       	ldi	r30, 0x1C	; 28
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 63 10 	call	0x20c6	; 0x20c6 <main>
      8a:	0c 94 0c 11 	jmp	0x2218	; 0x2218 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 10 	jmp	0x2120	; 0x2120 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 10 	jmp	0x2158	; 0x2158 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 10 	jmp	0x2130	; 0x2130 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e6       	ldi	r22, 0x6B	; 107
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 10 	jmp	0x2168	; 0x2168 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 10 	jmp	0x2170	; 0x2170 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a0 10 	jmp	0x2140	; 0x2140 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bc 10 	jmp	0x2178	; 0x2178 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <Ultrasonic_edgeProcessing>:
static u8 edge = 0, time= 0;
static u16 distance;

/*The CallBack function*/
static void Ultrasonic_edgeProcessing(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	++edge;
     ca6:	80 91 74 00 	lds	r24, 0x0074
     caa:	8f 5f       	subi	r24, 0xFF	; 255
     cac:	80 93 74 00 	sts	0x0074, r24
	if(edge == 1)
     cb0:	80 91 74 00 	lds	r24, 0x0074
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimer();
     cb8:	0e 94 3c 10 	call	0x2078	; 0x2078 <ICU_clearTimer>
		ICU_setEdgeDetection(FALLING);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0e 94 12 10 	call	0x2024	; 0x2024 <ICU_setEdgeDetection>
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <Ultrasonic_edgeProcessing+0x3c>
	}
	else if(edge == 2)
     cc4:	80 91 74 00 	lds	r24, 0x0074
     cc8:	82 30       	cpi	r24, 0x02	; 2
     cca:	39 f4       	brne	.+14     	; 0xcda <Ultrasonic_edgeProcessing+0x3c>
	{
		time = ICU_getInputCapture();
     ccc:	0e 94 31 10 	call	0x2062	; 0x2062 <ICU_getInputCapture>
     cd0:	80 93 75 00 	sts	0x0075, r24
		ICU_setEdgeDetection(RISING);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 12 10 	call	0x2024	; 0x2024 <ICU_setEdgeDetection>
	}

}
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <Ultrasonic_Trigger>:

/*Function that triggers pin*/
static void Ultrasonic_Trigger(void)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	cd b7       	in	r28, 0x3d	; 61
     ce6:	de b7       	in	r29, 0x3e	; 62
     ce8:	68 97       	sbiw	r28, 0x18	; 24
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	de bf       	out	0x3e, r29	; 62
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	cd bf       	out	0x3d, r28	; 61
	/*Set trigger pin to high and wait 10 us then set it to low*/
	GPIO_writePin(Trigger_Port, Trigger_Pin, High);
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	65 e0       	ldi	r22, 0x05	; 5
     cf8:	41 e0       	ldi	r20, 0x01	; 1
     cfa:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	a0 e2       	ldi	r26, 0x20	; 32
     d04:	b1 e4       	ldi	r27, 0x41	; 65
     d06:	8d 8b       	std	Y+21, r24	; 0x15
     d08:	9e 8b       	std	Y+22, r25	; 0x16
     d0a:	af 8b       	std	Y+23, r26	; 0x17
     d0c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     d0e:	6d 89       	ldd	r22, Y+21	; 0x15
     d10:	7e 89       	ldd	r23, Y+22	; 0x16
     d12:	8f 89       	ldd	r24, Y+23	; 0x17
     d14:	98 8d       	ldd	r25, Y+24	; 0x18
     d16:	2b ea       	ldi	r18, 0xAB	; 171
     d18:	3a ea       	ldi	r19, 0xAA	; 170
     d1a:	4a e2       	ldi	r20, 0x2A	; 42
     d1c:	50 e4       	ldi	r21, 0x40	; 64
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	89 8b       	std	Y+17, r24	; 0x11
     d28:	9a 8b       	std	Y+18, r25	; 0x12
     d2a:	ab 8b       	std	Y+19, r26	; 0x13
     d2c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     d2e:	69 89       	ldd	r22, Y+17	; 0x11
     d30:	7a 89       	ldd	r23, Y+18	; 0x12
     d32:	8b 89       	ldd	r24, Y+19	; 0x13
     d34:	9c 89       	ldd	r25, Y+20	; 0x14
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e8       	ldi	r20, 0x80	; 128
     d3c:	5f e3       	ldi	r21, 0x3F	; 63
     d3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d42:	88 23       	and	r24, r24
     d44:	1c f4       	brge	.+6      	; 0xd4c <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	88 8b       	std	Y+16, r24	; 0x10
     d4a:	91 c0       	rjmp	.+290    	; 0xe6e <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
     d4c:	69 89       	ldd	r22, Y+17	; 0x11
     d4e:	7a 89       	ldd	r23, Y+18	; 0x12
     d50:	8b 89       	ldd	r24, Y+19	; 0x13
     d52:	9c 89       	ldd	r25, Y+20	; 0x14
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	4f e7       	ldi	r20, 0x7F	; 127
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d60:	18 16       	cp	r1, r24
     d62:	0c f0       	brlt	.+2      	; 0xd66 <Ultrasonic_Trigger+0x86>
     d64:	7b c0       	rjmp	.+246    	; 0xe5c <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
     d66:	6d 89       	ldd	r22, Y+21	; 0x15
     d68:	7e 89       	ldd	r23, Y+22	; 0x16
     d6a:	8f 89       	ldd	r24, Y+23	; 0x17
     d6c:	98 8d       	ldd	r25, Y+24	; 0x18
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	4a e7       	ldi	r20, 0x7A	; 122
     d74:	54 e4       	ldi	r21, 0x44	; 68
     d76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	8c 87       	std	Y+12, r24	; 0x0c
     d80:	9d 87       	std	Y+13, r25	; 0x0d
     d82:	ae 87       	std	Y+14, r26	; 0x0e
     d84:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d86:	6c 85       	ldd	r22, Y+12	; 0x0c
     d88:	7d 85       	ldd	r23, Y+13	; 0x0d
     d8a:	8e 85       	ldd	r24, Y+14	; 0x0e
     d8c:	9f 85       	ldd	r25, Y+15	; 0x0f
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	4a ef       	ldi	r20, 0xFA	; 250
     d94:	54 e4       	ldi	r21, 0x44	; 68
     d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	88 87       	std	Y+8, r24	; 0x08
     da0:	99 87       	std	Y+9, r25	; 0x09
     da2:	aa 87       	std	Y+10, r26	; 0x0a
     da4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     da6:	68 85       	ldd	r22, Y+8	; 0x08
     da8:	79 85       	ldd	r23, Y+9	; 0x09
     daa:	8a 85       	ldd	r24, Y+10	; 0x0a
     dac:	9b 85       	ldd	r25, Y+11	; 0x0b
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	40 e8       	ldi	r20, 0x80	; 128
     db4:	5f e3       	ldi	r21, 0x3F	; 63
     db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     dba:	88 23       	and	r24, r24
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	9f 83       	std	Y+7, r25	; 0x07
     dc4:	8e 83       	std	Y+6, r24	; 0x06
     dc6:	3f c0       	rjmp	.+126    	; 0xe46 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
     dc8:	68 85       	ldd	r22, Y+8	; 0x08
     dca:	79 85       	ldd	r23, Y+9	; 0x09
     dcc:	8a 85       	ldd	r24, Y+10	; 0x0a
     dce:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	3f ef       	ldi	r19, 0xFF	; 255
     dd4:	4f e7       	ldi	r20, 0x7F	; 127
     dd6:	57 e4       	ldi	r21, 0x47	; 71
     dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ddc:	18 16       	cp	r1, r24
     dde:	4c f5       	brge	.+82     	; 0xe32 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     de0:	6c 85       	ldd	r22, Y+12	; 0x0c
     de2:	7d 85       	ldd	r23, Y+13	; 0x0d
     de4:	8e 85       	ldd	r24, Y+14	; 0x0e
     de6:	9f 85       	ldd	r25, Y+15	; 0x0f
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	40 e2       	ldi	r20, 0x20	; 32
     dee:	51 e4       	ldi	r21, 0x41	; 65
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	bc 01       	movw	r22, r24
     dfa:	cd 01       	movw	r24, r26
     dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e00:	dc 01       	movw	r26, r24
     e02:	cb 01       	movw	r24, r22
     e04:	9f 83       	std	Y+7, r25	; 0x07
     e06:	8e 83       	std	Y+6, r24	; 0x06
     e08:	0f c0       	rjmp	.+30     	; 0xe28 <Ultrasonic_Trigger+0x148>
     e0a:	88 ec       	ldi	r24, 0xC8	; 200
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9d 83       	std	Y+5, r25	; 0x05
     e10:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e12:	8c 81       	ldd	r24, Y+4	; 0x04
     e14:	9d 81       	ldd	r25, Y+5	; 0x05
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <Ultrasonic_Trigger+0x136>
     e1a:	9d 83       	std	Y+5, r25	; 0x05
     e1c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1e:	8e 81       	ldd	r24, Y+6	; 0x06
     e20:	9f 81       	ldd	r25, Y+7	; 0x07
     e22:	01 97       	sbiw	r24, 0x01	; 1
     e24:	9f 83       	std	Y+7, r25	; 0x07
     e26:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e28:	8e 81       	ldd	r24, Y+6	; 0x06
     e2a:	9f 81       	ldd	r25, Y+7	; 0x07
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	69 f7       	brne	.-38     	; 0xe0a <Ultrasonic_Trigger+0x12a>
     e30:	24 c0       	rjmp	.+72     	; 0xe7a <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e32:	68 85       	ldd	r22, Y+8	; 0x08
     e34:	79 85       	ldd	r23, Y+9	; 0x09
     e36:	8a 85       	ldd	r24, Y+10	; 0x0a
     e38:	9b 85       	ldd	r25, Y+11	; 0x0b
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9f 83       	std	Y+7, r25	; 0x07
     e44:	8e 83       	std	Y+6, r24	; 0x06
     e46:	8e 81       	ldd	r24, Y+6	; 0x06
     e48:	9f 81       	ldd	r25, Y+7	; 0x07
     e4a:	9b 83       	std	Y+3, r25	; 0x03
     e4c:	8a 83       	std	Y+2, r24	; 0x02
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	9b 81       	ldd	r25, Y+3	; 0x03
     e52:	01 97       	sbiw	r24, 0x01	; 1
     e54:	f1 f7       	brne	.-4      	; 0xe52 <Ultrasonic_Trigger+0x172>
     e56:	9b 83       	std	Y+3, r25	; 0x03
     e58:	8a 83       	std	Y+2, r24	; 0x02
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     e5c:	69 89       	ldd	r22, Y+17	; 0x11
     e5e:	7a 89       	ldd	r23, Y+18	; 0x12
     e60:	8b 89       	ldd	r24, Y+19	; 0x13
     e62:	9c 89       	ldd	r25, Y+20	; 0x14
     e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	88 8b       	std	Y+16, r24	; 0x10
     e6e:	88 89       	ldd	r24, Y+16	; 0x10
     e70:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	8a 95       	dec	r24
     e76:	f1 f7       	brne	.-4      	; 0xe74 <Ultrasonic_Trigger+0x194>
     e78:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(Trigger_Port, Trigger_Pin, Low);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	65 e0       	ldi	r22, 0x05	; 5
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
}
     e84:	68 96       	adiw	r28, 0x18	; 24
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <Ultrasonic_Init>:

/*Init the Ultrasonic by initializing the ICU*/
void Ultrasonic_Init(void)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <Ultrasonic_Init+0x6>
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
	/*Init the ICU by Setting Clock to FCPU/8 and set edge detection to be rising*/
	ICU_Config config = {F_CPU_8, RISING};
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	8a 83       	std	Y+2, r24	; 0x02

	/*Set Trigger pin as output*/
	GPIO_setPinDirection(Trigger_Port, Trigger_Pin, OUTPUT);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	65 e0       	ldi	r22, 0x05	; 5
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	0e 94 4b 0c 	call	0x1896	; 0x1896 <GPIO_setPinDirection>

	/*Init the ICU*/
	ICU_Init(&config);
     eb2:	ce 01       	movw	r24, r28
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <ICU_Init>

	/*Set the CallBack function */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
     eba:	8f e4       	ldi	r24, 0x4F	; 79
     ebc:	96 e0       	ldi	r25, 0x06	; 6
     ebe:	0e 94 00 10 	call	0x2000	; 0x2000 <ICU_setCallBack>
}
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <Ultrasonic_readDistance>:

/*Function that continously read distance which
 * it measures time then calculate distance*/
u16 Ultrasonic_readDistance(void)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	cd b7       	in	r28, 0x3d	; 61
     ed2:	de b7       	in	r29, 0x3e	; 62
	/*Clear all variables in order not to affect measurements from previous values*/
	distance = 0;
     ed4:	10 92 77 00 	sts	0x0077, r1
     ed8:	10 92 76 00 	sts	0x0076, r1
	edge = 0;
     edc:	10 92 74 00 	sts	0x0074, r1
	time= 0;
     ee0:	10 92 75 00 	sts	0x0075, r1

	/*Clear ICU Timer value*/
	ICU_clearTimer();
     ee4:	0e 94 3c 10 	call	0x2078	; 0x2078 <ICU_clearTimer>
	/*Trigger a pulse to let ultrasonic make echo*/
	Ultrasonic_Trigger();
     ee8:	0e 94 70 06 	call	0xce0	; 0xce0 <Ultrasonic_Trigger>

	/*Wait for measuring time from a rising edge*/
	while(edge != NO_EDGES);
     eec:	80 91 74 00 	lds	r24, 0x0074
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	e1 f7       	brne	.-8      	; 0xeec <Ultrasonic_readDistance+0x20>

	/*Calculating distance and return the value*/
	distance = time/58;
     ef4:	80 91 75 00 	lds	r24, 0x0075
     ef8:	9a e3       	ldi	r25, 0x3A	; 58
     efa:	69 2f       	mov	r22, r25
     efc:	0e 94 84 10 	call	0x2108	; 0x2108 <__udivmodqi4>
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	90 93 77 00 	sts	0x0077, r25
     f08:	80 93 76 00 	sts	0x0076, r24
	return distance;
     f0c:	80 91 76 00 	lds	r24, 0x0076
     f10:	90 91 77 00 	lds	r25, 0x0077
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <LCD_init>:
#include "LCD.h"
#include <avr/delay.h>


void LCD_init()
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
	GPIO_setPinDirection(ControlPort, RS, OUTPUT);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	60 e0       	ldi	r22, 0x00	; 0
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 4b 0c 	call	0x1896	; 0x1896 <GPIO_setPinDirection>
	GPIO_setPinDirection(ControlPort, RW, OUTPUT);
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	0e 94 4b 0c 	call	0x1896	; 0x1896 <GPIO_setPinDirection>
	GPIO_setPinDirection(ControlPort, EN, OUTPUT);
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <GPIO_setPinDirection>

#if Data_Bit_Mode == 8
	GPIO_setPortDirection(DataPort,OUTPUT);
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	61 e0       	ldi	r22, 0x01	; 1
     f44:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <GPIO_setPortDirection>
	LCD_sendCommand(LCD_8bit);
     f48:	88 e3       	ldi	r24, 0x38	; 56
     f4a:	0e 94 b0 07 	call	0xf60	; 0xf60 <LCD_sendCommand>
	GPIO_setPinDirection(DataPort, DataPin+2, OUTPUT);
	GPIO_setPinDirection(DataPort, DataPin+3, OUTPUT);

	LCD_sendCommand(LCD_GO_TO_HOME);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
     f4e:	8c e0       	ldi	r24, 0x0C	; 12
     f50:	0e 94 b0 07 	call	0xf60	; 0xf60 <LCD_sendCommand>
	LCD_sendCommand(LCD_ClearScreen);
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	0e 94 b0 07 	call	0xf60	; 0xf60 <LCD_sendCommand>
}
     f5a:	cf 91       	pop	r28
     f5c:	df 91       	pop	r29
     f5e:	08 95       	ret

00000f60 <LCD_sendCommand>:

void LCD_sendCommand(u8 cmd)
{
     f60:	df 93       	push	r29
     f62:	cf 93       	push	r28
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	e9 97       	sbiw	r28, 0x39	; 57
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(ControlPort, RS, Low);
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
	GPIO_writePin(ControlPort, RW, Low);
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e8       	ldi	r26, 0x80	; 128
     f90:	bf e3       	ldi	r27, 0x3F	; 63
     f92:	8d ab       	std	Y+53, r24	; 0x35
     f94:	9e ab       	std	Y+54, r25	; 0x36
     f96:	af ab       	std	Y+55, r26	; 0x37
     f98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9a:	6d a9       	ldd	r22, Y+53	; 0x35
     f9c:	7e a9       	ldd	r23, Y+54	; 0x36
     f9e:	8f a9       	ldd	r24, Y+55	; 0x37
     fa0:	98 ad       	ldd	r25, Y+56	; 0x38
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4a ef       	ldi	r20, 0xFA	; 250
     fa8:	54 e4       	ldi	r21, 0x44	; 68
     faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	89 ab       	std	Y+49, r24	; 0x31
     fb4:	9a ab       	std	Y+50, r25	; 0x32
     fb6:	ab ab       	std	Y+51, r26	; 0x33
     fb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fba:	69 a9       	ldd	r22, Y+49	; 0x31
     fbc:	7a a9       	ldd	r23, Y+50	; 0x32
     fbe:	8b a9       	ldd	r24, Y+51	; 0x33
     fc0:	9c a9       	ldd	r25, Y+52	; 0x34
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e8       	ldi	r20, 0x80	; 128
     fc8:	5f e3       	ldi	r21, 0x3F	; 63
     fca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fce:	88 23       	and	r24, r24
     fd0:	2c f4       	brge	.+10     	; 0xfdc <LCD_sendCommand+0x7c>
		__ticks = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	98 ab       	std	Y+48, r25	; 0x30
     fd8:	8f a7       	std	Y+47, r24	; 0x2f
     fda:	3f c0       	rjmp	.+126    	; 0x105a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
     fdc:	69 a9       	ldd	r22, Y+49	; 0x31
     fde:	7a a9       	ldd	r23, Y+50	; 0x32
     fe0:	8b a9       	ldd	r24, Y+51	; 0x33
     fe2:	9c a9       	ldd	r25, Y+52	; 0x34
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	3f ef       	ldi	r19, 0xFF	; 255
     fe8:	4f e7       	ldi	r20, 0x7F	; 127
     fea:	57 e4       	ldi	r21, 0x47	; 71
     fec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ff0:	18 16       	cp	r1, r24
     ff2:	4c f5       	brge	.+82     	; 0x1046 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff4:	6d a9       	ldd	r22, Y+53	; 0x35
     ff6:	7e a9       	ldd	r23, Y+54	; 0x36
     ff8:	8f a9       	ldd	r24, Y+55	; 0x37
     ffa:	98 ad       	ldd	r25, Y+56	; 0x38
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e2       	ldi	r20, 0x20	; 32
    1002:	51 e4       	ldi	r21, 0x41	; 65
    1004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	98 ab       	std	Y+48, r25	; 0x30
    101a:	8f a7       	std	Y+47, r24	; 0x2f
    101c:	0f c0       	rjmp	.+30     	; 0x103c <LCD_sendCommand+0xdc>
    101e:	88 ec       	ldi	r24, 0xC8	; 200
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9e a7       	std	Y+46, r25	; 0x2e
    1024:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1026:	8d a5       	ldd	r24, Y+45	; 0x2d
    1028:	9e a5       	ldd	r25, Y+46	; 0x2e
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	f1 f7       	brne	.-4      	; 0x102a <LCD_sendCommand+0xca>
    102e:	9e a7       	std	Y+46, r25	; 0x2e
    1030:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1032:	8f a5       	ldd	r24, Y+47	; 0x2f
    1034:	98 a9       	ldd	r25, Y+48	; 0x30
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	98 ab       	std	Y+48, r25	; 0x30
    103a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103c:	8f a5       	ldd	r24, Y+47	; 0x2f
    103e:	98 a9       	ldd	r25, Y+48	; 0x30
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	69 f7       	brne	.-38     	; 0x101e <LCD_sendCommand+0xbe>
    1044:	14 c0       	rjmp	.+40     	; 0x106e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1046:	69 a9       	ldd	r22, Y+49	; 0x31
    1048:	7a a9       	ldd	r23, Y+50	; 0x32
    104a:	8b a9       	ldd	r24, Y+51	; 0x33
    104c:	9c a9       	ldd	r25, Y+52	; 0x34
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	98 ab       	std	Y+48, r25	; 0x30
    1058:	8f a7       	std	Y+47, r24	; 0x2f
    105a:	8f a5       	ldd	r24, Y+47	; 0x2f
    105c:	98 a9       	ldd	r25, Y+48	; 0x30
    105e:	9c a7       	std	Y+44, r25	; 0x2c
    1060:	8b a7       	std	Y+43, r24	; 0x2b
    1062:	8b a5       	ldd	r24, Y+43	; 0x2b
    1064:	9c a5       	ldd	r25, Y+44	; 0x2c
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <LCD_sendCommand+0x106>
    106a:	9c a7       	std	Y+44, r25	; 0x2c
    106c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, High);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	62 e0       	ldi	r22, 0x02	; 2
    1072:	41 e0       	ldi	r20, 0x01	; 1
    1074:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	a0 e8       	ldi	r26, 0x80	; 128
    107e:	bf e3       	ldi	r27, 0x3F	; 63
    1080:	8f a3       	std	Y+39, r24	; 0x27
    1082:	98 a7       	std	Y+40, r25	; 0x28
    1084:	a9 a7       	std	Y+41, r26	; 0x29
    1086:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1088:	6f a1       	ldd	r22, Y+39	; 0x27
    108a:	78 a5       	ldd	r23, Y+40	; 0x28
    108c:	89 a5       	ldd	r24, Y+41	; 0x29
    108e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	4a ef       	ldi	r20, 0xFA	; 250
    1096:	54 e4       	ldi	r21, 0x44	; 68
    1098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	8b a3       	std	Y+35, r24	; 0x23
    10a2:	9c a3       	std	Y+36, r25	; 0x24
    10a4:	ad a3       	std	Y+37, r26	; 0x25
    10a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10a8:	6b a1       	ldd	r22, Y+35	; 0x23
    10aa:	7c a1       	ldd	r23, Y+36	; 0x24
    10ac:	8d a1       	ldd	r24, Y+37	; 0x25
    10ae:	9e a1       	ldd	r25, Y+38	; 0x26
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	40 e8       	ldi	r20, 0x80	; 128
    10b6:	5f e3       	ldi	r21, 0x3F	; 63
    10b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10bc:	88 23       	and	r24, r24
    10be:	2c f4       	brge	.+10     	; 0x10ca <LCD_sendCommand+0x16a>
		__ticks = 1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9a a3       	std	Y+34, r25	; 0x22
    10c6:	89 a3       	std	Y+33, r24	; 0x21
    10c8:	3f c0       	rjmp	.+126    	; 0x1148 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    10ca:	6b a1       	ldd	r22, Y+35	; 0x23
    10cc:	7c a1       	ldd	r23, Y+36	; 0x24
    10ce:	8d a1       	ldd	r24, Y+37	; 0x25
    10d0:	9e a1       	ldd	r25, Y+38	; 0x26
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	3f ef       	ldi	r19, 0xFF	; 255
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	57 e4       	ldi	r21, 0x47	; 71
    10da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10de:	18 16       	cp	r1, r24
    10e0:	4c f5       	brge	.+82     	; 0x1134 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e2:	6f a1       	ldd	r22, Y+39	; 0x27
    10e4:	78 a5       	ldd	r23, Y+40	; 0x28
    10e6:	89 a5       	ldd	r24, Y+41	; 0x29
    10e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e2       	ldi	r20, 0x20	; 32
    10f0:	51 e4       	ldi	r21, 0x41	; 65
    10f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9a a3       	std	Y+34, r25	; 0x22
    1108:	89 a3       	std	Y+33, r24	; 0x21
    110a:	0f c0       	rjmp	.+30     	; 0x112a <LCD_sendCommand+0x1ca>
    110c:	88 ec       	ldi	r24, 0xC8	; 200
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	98 a3       	std	Y+32, r25	; 0x20
    1112:	8f 8f       	std	Y+31, r24	; 0x1f
    1114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1116:	98 a1       	ldd	r25, Y+32	; 0x20
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <LCD_sendCommand+0x1b8>
    111c:	98 a3       	std	Y+32, r25	; 0x20
    111e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1120:	89 a1       	ldd	r24, Y+33	; 0x21
    1122:	9a a1       	ldd	r25, Y+34	; 0x22
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	9a a3       	std	Y+34, r25	; 0x22
    1128:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112a:	89 a1       	ldd	r24, Y+33	; 0x21
    112c:	9a a1       	ldd	r25, Y+34	; 0x22
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	69 f7       	brne	.-38     	; 0x110c <LCD_sendCommand+0x1ac>
    1132:	14 c0       	rjmp	.+40     	; 0x115c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1134:	6b a1       	ldd	r22, Y+35	; 0x23
    1136:	7c a1       	ldd	r23, Y+36	; 0x24
    1138:	8d a1       	ldd	r24, Y+37	; 0x25
    113a:	9e a1       	ldd	r25, Y+38	; 0x26
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	9a a3       	std	Y+34, r25	; 0x22
    1146:	89 a3       	std	Y+33, r24	; 0x21
    1148:	89 a1       	ldd	r24, Y+33	; 0x21
    114a:	9a a1       	ldd	r25, Y+34	; 0x22
    114c:	9e 8f       	std	Y+30, r25	; 0x1e
    114e:	8d 8f       	std	Y+29, r24	; 0x1d
    1150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1152:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <LCD_sendCommand+0x1f4>
    1158:	9e 8f       	std	Y+30, r25	; 0x1e
    115a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(DataPort, cmd);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	69 ad       	ldd	r22, Y+57	; 0x39
    1160:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <GPIO_writePort>
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a0 e8       	ldi	r26, 0x80	; 128
    116a:	bf e3       	ldi	r27, 0x3F	; 63
    116c:	89 8f       	std	Y+25, r24	; 0x19
    116e:	9a 8f       	std	Y+26, r25	; 0x1a
    1170:	ab 8f       	std	Y+27, r26	; 0x1b
    1172:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1174:	69 8d       	ldd	r22, Y+25	; 0x19
    1176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	4a ef       	ldi	r20, 0xFA	; 250
    1182:	54 e4       	ldi	r21, 0x44	; 68
    1184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	8d 8b       	std	Y+21, r24	; 0x15
    118e:	9e 8b       	std	Y+22, r25	; 0x16
    1190:	af 8b       	std	Y+23, r26	; 0x17
    1192:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1194:	6d 89       	ldd	r22, Y+21	; 0x15
    1196:	7e 89       	ldd	r23, Y+22	; 0x16
    1198:	8f 89       	ldd	r24, Y+23	; 0x17
    119a:	98 8d       	ldd	r25, Y+24	; 0x18
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e8       	ldi	r20, 0x80	; 128
    11a2:	5f e3       	ldi	r21, 0x3F	; 63
    11a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11a8:	88 23       	and	r24, r24
    11aa:	2c f4       	brge	.+10     	; 0x11b6 <LCD_sendCommand+0x256>
		__ticks = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	9c 8b       	std	Y+20, r25	; 0x14
    11b2:	8b 8b       	std	Y+19, r24	; 0x13
    11b4:	3f c0       	rjmp	.+126    	; 0x1234 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    11b6:	6d 89       	ldd	r22, Y+21	; 0x15
    11b8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ba:	8f 89       	ldd	r24, Y+23	; 0x17
    11bc:	98 8d       	ldd	r25, Y+24	; 0x18
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	3f ef       	ldi	r19, 0xFF	; 255
    11c2:	4f e7       	ldi	r20, 0x7F	; 127
    11c4:	57 e4       	ldi	r21, 0x47	; 71
    11c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ca:	18 16       	cp	r1, r24
    11cc:	4c f5       	brge	.+82     	; 0x1220 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ce:	69 8d       	ldd	r22, Y+25	; 0x19
    11d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	40 e2       	ldi	r20, 0x20	; 32
    11dc:	51 e4       	ldi	r21, 0x41	; 65
    11de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ee:	dc 01       	movw	r26, r24
    11f0:	cb 01       	movw	r24, r22
    11f2:	9c 8b       	std	Y+20, r25	; 0x14
    11f4:	8b 8b       	std	Y+19, r24	; 0x13
    11f6:	0f c0       	rjmp	.+30     	; 0x1216 <LCD_sendCommand+0x2b6>
    11f8:	88 ec       	ldi	r24, 0xC8	; 200
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	9a 8b       	std	Y+18, r25	; 0x12
    11fe:	89 8b       	std	Y+17, r24	; 0x11
    1200:	89 89       	ldd	r24, Y+17	; 0x11
    1202:	9a 89       	ldd	r25, Y+18	; 0x12
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <LCD_sendCommand+0x2a4>
    1208:	9a 8b       	std	Y+18, r25	; 0x12
    120a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    120c:	8b 89       	ldd	r24, Y+19	; 0x13
    120e:	9c 89       	ldd	r25, Y+20	; 0x14
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	9c 8b       	std	Y+20, r25	; 0x14
    1214:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	8b 89       	ldd	r24, Y+19	; 0x13
    1218:	9c 89       	ldd	r25, Y+20	; 0x14
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	69 f7       	brne	.-38     	; 0x11f8 <LCD_sendCommand+0x298>
    121e:	14 c0       	rjmp	.+40     	; 0x1248 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1220:	6d 89       	ldd	r22, Y+21	; 0x15
    1222:	7e 89       	ldd	r23, Y+22	; 0x16
    1224:	8f 89       	ldd	r24, Y+23	; 0x17
    1226:	98 8d       	ldd	r25, Y+24	; 0x18
    1228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	9c 8b       	std	Y+20, r25	; 0x14
    1232:	8b 8b       	std	Y+19, r24	; 0x13
    1234:	8b 89       	ldd	r24, Y+19	; 0x13
    1236:	9c 89       	ldd	r25, Y+20	; 0x14
    1238:	98 8b       	std	Y+16, r25	; 0x10
    123a:	8f 87       	std	Y+15, r24	; 0x0f
    123c:	8f 85       	ldd	r24, Y+15	; 0x0f
    123e:	98 89       	ldd	r25, Y+16	; 0x10
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	f1 f7       	brne	.-4      	; 0x1240 <LCD_sendCommand+0x2e0>
    1244:	98 8b       	std	Y+16, r25	; 0x10
    1246:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, Low);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	62 e0       	ldi	r22, 0x02	; 2
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a0 e8       	ldi	r26, 0x80	; 128
    1258:	bf e3       	ldi	r27, 0x3F	; 63
    125a:	8b 87       	std	Y+11, r24	; 0x0b
    125c:	9c 87       	std	Y+12, r25	; 0x0c
    125e:	ad 87       	std	Y+13, r26	; 0x0d
    1260:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1262:	6b 85       	ldd	r22, Y+11	; 0x0b
    1264:	7c 85       	ldd	r23, Y+12	; 0x0c
    1266:	8d 85       	ldd	r24, Y+13	; 0x0d
    1268:	9e 85       	ldd	r25, Y+14	; 0x0e
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	4a ef       	ldi	r20, 0xFA	; 250
    1270:	54 e4       	ldi	r21, 0x44	; 68
    1272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	8f 83       	std	Y+7, r24	; 0x07
    127c:	98 87       	std	Y+8, r25	; 0x08
    127e:	a9 87       	std	Y+9, r26	; 0x09
    1280:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1282:	6f 81       	ldd	r22, Y+7	; 0x07
    1284:	78 85       	ldd	r23, Y+8	; 0x08
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <LCD_sendCommand+0x344>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9e 83       	std	Y+6, r25	; 0x06
    12a0:	8d 83       	std	Y+5, r24	; 0x05
    12a2:	3f c0       	rjmp	.+126    	; 0x1322 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    12a4:	6f 81       	ldd	r22, Y+7	; 0x07
    12a6:	78 85       	ldd	r23, Y+8	; 0x08
    12a8:	89 85       	ldd	r24, Y+9	; 0x09
    12aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ac:	20 e0       	ldi	r18, 0x00	; 0
    12ae:	3f ef       	ldi	r19, 0xFF	; 255
    12b0:	4f e7       	ldi	r20, 0x7F	; 127
    12b2:	57 e4       	ldi	r21, 0x47	; 71
    12b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12b8:	18 16       	cp	r1, r24
    12ba:	4c f5       	brge	.+82     	; 0x130e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12be:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e2       	ldi	r20, 0x20	; 32
    12ca:	51 e4       	ldi	r21, 0x41	; 65
    12cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	9e 83       	std	Y+6, r25	; 0x06
    12e2:	8d 83       	std	Y+5, r24	; 0x05
    12e4:	0f c0       	rjmp	.+30     	; 0x1304 <LCD_sendCommand+0x3a4>
    12e6:	88 ec       	ldi	r24, 0xC8	; 200
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9c 83       	std	Y+4, r25	; 0x04
    12ec:	8b 83       	std	Y+3, r24	; 0x03
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <LCD_sendCommand+0x392>
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12fa:	8d 81       	ldd	r24, Y+5	; 0x05
    12fc:	9e 81       	ldd	r25, Y+6	; 0x06
    12fe:	01 97       	sbiw	r24, 0x01	; 1
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	69 f7       	brne	.-38     	; 0x12e6 <LCD_sendCommand+0x386>
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130e:	6f 81       	ldd	r22, Y+7	; 0x07
    1310:	78 85       	ldd	r23, Y+8	; 0x08
    1312:	89 85       	ldd	r24, Y+9	; 0x09
    1314:	9a 85       	ldd	r25, Y+10	; 0x0a
    1316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	9e 81       	ldd	r25, Y+6	; 0x06
    1326:	9a 83       	std	Y+2, r25	; 0x02
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	9a 81       	ldd	r25, Y+2	; 0x02
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <LCD_sendCommand+0x3ce>
    1332:	9a 83       	std	Y+2, r25	; 0x02
    1334:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1336:	e9 96       	adiw	r28, 0x39	; 57
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter(u8 ch)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	e9 97       	sbiw	r28, 0x39	; 57
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(ControlPort, RS, High);
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	41 e0       	ldi	r20, 0x01	; 1
    1364:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
	GPIO_writePin(ControlPort, RW, Low);
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	a0 e8       	ldi	r26, 0x80	; 128
    1378:	bf e3       	ldi	r27, 0x3F	; 63
    137a:	8d ab       	std	Y+53, r24	; 0x35
    137c:	9e ab       	std	Y+54, r25	; 0x36
    137e:	af ab       	std	Y+55, r26	; 0x37
    1380:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1382:	6d a9       	ldd	r22, Y+53	; 0x35
    1384:	7e a9       	ldd	r23, Y+54	; 0x36
    1386:	8f a9       	ldd	r24, Y+55	; 0x37
    1388:	98 ad       	ldd	r25, Y+56	; 0x38
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a ef       	ldi	r20, 0xFA	; 250
    1390:	54 e4       	ldi	r21, 0x44	; 68
    1392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	89 ab       	std	Y+49, r24	; 0x31
    139c:	9a ab       	std	Y+50, r25	; 0x32
    139e:	ab ab       	std	Y+51, r26	; 0x33
    13a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13a2:	69 a9       	ldd	r22, Y+49	; 0x31
    13a4:	7a a9       	ldd	r23, Y+50	; 0x32
    13a6:	8b a9       	ldd	r24, Y+51	; 0x33
    13a8:	9c a9       	ldd	r25, Y+52	; 0x34
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e8       	ldi	r20, 0x80	; 128
    13b0:	5f e3       	ldi	r21, 0x3F	; 63
    13b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13b6:	88 23       	and	r24, r24
    13b8:	2c f4       	brge	.+10     	; 0x13c4 <LCD_DisplayCharacter+0x7c>
		__ticks = 1;
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	98 ab       	std	Y+48, r25	; 0x30
    13c0:	8f a7       	std	Y+47, r24	; 0x2f
    13c2:	3f c0       	rjmp	.+126    	; 0x1442 <LCD_DisplayCharacter+0xfa>
	else if (__tmp > 65535)
    13c4:	69 a9       	ldd	r22, Y+49	; 0x31
    13c6:	7a a9       	ldd	r23, Y+50	; 0x32
    13c8:	8b a9       	ldd	r24, Y+51	; 0x33
    13ca:	9c a9       	ldd	r25, Y+52	; 0x34
    13cc:	20 e0       	ldi	r18, 0x00	; 0
    13ce:	3f ef       	ldi	r19, 0xFF	; 255
    13d0:	4f e7       	ldi	r20, 0x7F	; 127
    13d2:	57 e4       	ldi	r21, 0x47	; 71
    13d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    13d8:	18 16       	cp	r1, r24
    13da:	4c f5       	brge	.+82     	; 0x142e <LCD_DisplayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13dc:	6d a9       	ldd	r22, Y+53	; 0x35
    13de:	7e a9       	ldd	r23, Y+54	; 0x36
    13e0:	8f a9       	ldd	r24, Y+55	; 0x37
    13e2:	98 ad       	ldd	r25, Y+56	; 0x38
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e2       	ldi	r20, 0x20	; 32
    13ea:	51 e4       	ldi	r21, 0x41	; 65
    13ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	bc 01       	movw	r22, r24
    13f6:	cd 01       	movw	r24, r26
    13f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	98 ab       	std	Y+48, r25	; 0x30
    1402:	8f a7       	std	Y+47, r24	; 0x2f
    1404:	0f c0       	rjmp	.+30     	; 0x1424 <LCD_DisplayCharacter+0xdc>
    1406:	88 ec       	ldi	r24, 0xC8	; 200
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9e a7       	std	Y+46, r25	; 0x2e
    140c:	8d a7       	std	Y+45, r24	; 0x2d
    140e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1410:	9e a5       	ldd	r25, Y+46	; 0x2e
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	f1 f7       	brne	.-4      	; 0x1412 <LCD_DisplayCharacter+0xca>
    1416:	9e a7       	std	Y+46, r25	; 0x2e
    1418:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    141a:	8f a5       	ldd	r24, Y+47	; 0x2f
    141c:	98 a9       	ldd	r25, Y+48	; 0x30
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	98 ab       	std	Y+48, r25	; 0x30
    1422:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1424:	8f a5       	ldd	r24, Y+47	; 0x2f
    1426:	98 a9       	ldd	r25, Y+48	; 0x30
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	69 f7       	brne	.-38     	; 0x1406 <LCD_DisplayCharacter+0xbe>
    142c:	14 c0       	rjmp	.+40     	; 0x1456 <LCD_DisplayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142e:	69 a9       	ldd	r22, Y+49	; 0x31
    1430:	7a a9       	ldd	r23, Y+50	; 0x32
    1432:	8b a9       	ldd	r24, Y+51	; 0x33
    1434:	9c a9       	ldd	r25, Y+52	; 0x34
    1436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	98 ab       	std	Y+48, r25	; 0x30
    1440:	8f a7       	std	Y+47, r24	; 0x2f
    1442:	8f a5       	ldd	r24, Y+47	; 0x2f
    1444:	98 a9       	ldd	r25, Y+48	; 0x30
    1446:	9c a7       	std	Y+44, r25	; 0x2c
    1448:	8b a7       	std	Y+43, r24	; 0x2b
    144a:	8b a5       	ldd	r24, Y+43	; 0x2b
    144c:	9c a5       	ldd	r25, Y+44	; 0x2c
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <LCD_DisplayCharacter+0x106>
    1452:	9c a7       	std	Y+44, r25	; 0x2c
    1454:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, High);
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	62 e0       	ldi	r22, 0x02	; 2
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	a0 e8       	ldi	r26, 0x80	; 128
    1466:	bf e3       	ldi	r27, 0x3F	; 63
    1468:	8f a3       	std	Y+39, r24	; 0x27
    146a:	98 a7       	std	Y+40, r25	; 0x28
    146c:	a9 a7       	std	Y+41, r26	; 0x29
    146e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1470:	6f a1       	ldd	r22, Y+39	; 0x27
    1472:	78 a5       	ldd	r23, Y+40	; 0x28
    1474:	89 a5       	ldd	r24, Y+41	; 0x29
    1476:	9a a5       	ldd	r25, Y+42	; 0x2a
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	4a ef       	ldi	r20, 0xFA	; 250
    147e:	54 e4       	ldi	r21, 0x44	; 68
    1480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1484:	dc 01       	movw	r26, r24
    1486:	cb 01       	movw	r24, r22
    1488:	8b a3       	std	Y+35, r24	; 0x23
    148a:	9c a3       	std	Y+36, r25	; 0x24
    148c:	ad a3       	std	Y+37, r26	; 0x25
    148e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1490:	6b a1       	ldd	r22, Y+35	; 0x23
    1492:	7c a1       	ldd	r23, Y+36	; 0x24
    1494:	8d a1       	ldd	r24, Y+37	; 0x25
    1496:	9e a1       	ldd	r25, Y+38	; 0x26
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e8       	ldi	r20, 0x80	; 128
    149e:	5f e3       	ldi	r21, 0x3F	; 63
    14a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14a4:	88 23       	and	r24, r24
    14a6:	2c f4       	brge	.+10     	; 0x14b2 <LCD_DisplayCharacter+0x16a>
		__ticks = 1;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	9a a3       	std	Y+34, r25	; 0x22
    14ae:	89 a3       	std	Y+33, r24	; 0x21
    14b0:	3f c0       	rjmp	.+126    	; 0x1530 <LCD_DisplayCharacter+0x1e8>
	else if (__tmp > 65535)
    14b2:	6b a1       	ldd	r22, Y+35	; 0x23
    14b4:	7c a1       	ldd	r23, Y+36	; 0x24
    14b6:	8d a1       	ldd	r24, Y+37	; 0x25
    14b8:	9e a1       	ldd	r25, Y+38	; 0x26
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	3f ef       	ldi	r19, 0xFF	; 255
    14be:	4f e7       	ldi	r20, 0x7F	; 127
    14c0:	57 e4       	ldi	r21, 0x47	; 71
    14c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14c6:	18 16       	cp	r1, r24
    14c8:	4c f5       	brge	.+82     	; 0x151c <LCD_DisplayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ca:	6f a1       	ldd	r22, Y+39	; 0x27
    14cc:	78 a5       	ldd	r23, Y+40	; 0x28
    14ce:	89 a5       	ldd	r24, Y+41	; 0x29
    14d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	40 e2       	ldi	r20, 0x20	; 32
    14d8:	51 e4       	ldi	r21, 0x41	; 65
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	bc 01       	movw	r22, r24
    14e4:	cd 01       	movw	r24, r26
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9a a3       	std	Y+34, r25	; 0x22
    14f0:	89 a3       	std	Y+33, r24	; 0x21
    14f2:	0f c0       	rjmp	.+30     	; 0x1512 <LCD_DisplayCharacter+0x1ca>
    14f4:	88 ec       	ldi	r24, 0xC8	; 200
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	98 a3       	std	Y+32, r25	; 0x20
    14fa:	8f 8f       	std	Y+31, r24	; 0x1f
    14fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	f1 f7       	brne	.-4      	; 0x1500 <LCD_DisplayCharacter+0x1b8>
    1504:	98 a3       	std	Y+32, r25	; 0x20
    1506:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1508:	89 a1       	ldd	r24, Y+33	; 0x21
    150a:	9a a1       	ldd	r25, Y+34	; 0x22
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	9a a3       	std	Y+34, r25	; 0x22
    1510:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1512:	89 a1       	ldd	r24, Y+33	; 0x21
    1514:	9a a1       	ldd	r25, Y+34	; 0x22
    1516:	00 97       	sbiw	r24, 0x00	; 0
    1518:	69 f7       	brne	.-38     	; 0x14f4 <LCD_DisplayCharacter+0x1ac>
    151a:	14 c0       	rjmp	.+40     	; 0x1544 <LCD_DisplayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    151c:	6b a1       	ldd	r22, Y+35	; 0x23
    151e:	7c a1       	ldd	r23, Y+36	; 0x24
    1520:	8d a1       	ldd	r24, Y+37	; 0x25
    1522:	9e a1       	ldd	r25, Y+38	; 0x26
    1524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1528:	dc 01       	movw	r26, r24
    152a:	cb 01       	movw	r24, r22
    152c:	9a a3       	std	Y+34, r25	; 0x22
    152e:	89 a3       	std	Y+33, r24	; 0x21
    1530:	89 a1       	ldd	r24, Y+33	; 0x21
    1532:	9a a1       	ldd	r25, Y+34	; 0x22
    1534:	9e 8f       	std	Y+30, r25	; 0x1e
    1536:	8d 8f       	std	Y+29, r24	; 0x1d
    1538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    153a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_DisplayCharacter+0x1f4>
    1540:	9e 8f       	std	Y+30, r25	; 0x1e
    1542:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	GPIO_writePort(DataPort, ch);
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	69 ad       	ldd	r22, Y+57	; 0x39
    1548:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <GPIO_writePort>
    154c:	80 e0       	ldi	r24, 0x00	; 0
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e8       	ldi	r26, 0x80	; 128
    1552:	bf e3       	ldi	r27, 0x3F	; 63
    1554:	89 8f       	std	Y+25, r24	; 0x19
    1556:	9a 8f       	std	Y+26, r25	; 0x1a
    1558:	ab 8f       	std	Y+27, r26	; 0x1b
    155a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155c:	69 8d       	ldd	r22, Y+25	; 0x19
    155e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1560:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1562:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	4a ef       	ldi	r20, 0xFA	; 250
    156a:	54 e4       	ldi	r21, 0x44	; 68
    156c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	8d 8b       	std	Y+21, r24	; 0x15
    1576:	9e 8b       	std	Y+22, r25	; 0x16
    1578:	af 8b       	std	Y+23, r26	; 0x17
    157a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    157c:	6d 89       	ldd	r22, Y+21	; 0x15
    157e:	7e 89       	ldd	r23, Y+22	; 0x16
    1580:	8f 89       	ldd	r24, Y+23	; 0x17
    1582:	98 8d       	ldd	r25, Y+24	; 0x18
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	40 e8       	ldi	r20, 0x80	; 128
    158a:	5f e3       	ldi	r21, 0x3F	; 63
    158c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1590:	88 23       	and	r24, r24
    1592:	2c f4       	brge	.+10     	; 0x159e <LCD_DisplayCharacter+0x256>
		__ticks = 1;
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9c 8b       	std	Y+20, r25	; 0x14
    159a:	8b 8b       	std	Y+19, r24	; 0x13
    159c:	3f c0       	rjmp	.+126    	; 0x161c <LCD_DisplayCharacter+0x2d4>
	else if (__tmp > 65535)
    159e:	6d 89       	ldd	r22, Y+21	; 0x15
    15a0:	7e 89       	ldd	r23, Y+22	; 0x16
    15a2:	8f 89       	ldd	r24, Y+23	; 0x17
    15a4:	98 8d       	ldd	r25, Y+24	; 0x18
    15a6:	20 e0       	ldi	r18, 0x00	; 0
    15a8:	3f ef       	ldi	r19, 0xFF	; 255
    15aa:	4f e7       	ldi	r20, 0x7F	; 127
    15ac:	57 e4       	ldi	r21, 0x47	; 71
    15ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15b2:	18 16       	cp	r1, r24
    15b4:	4c f5       	brge	.+82     	; 0x1608 <LCD_DisplayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b6:	69 8d       	ldd	r22, Y+25	; 0x19
    15b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	40 e2       	ldi	r20, 0x20	; 32
    15c4:	51 e4       	ldi	r21, 0x41	; 65
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	bc 01       	movw	r22, r24
    15d0:	cd 01       	movw	r24, r26
    15d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d6:	dc 01       	movw	r26, r24
    15d8:	cb 01       	movw	r24, r22
    15da:	9c 8b       	std	Y+20, r25	; 0x14
    15dc:	8b 8b       	std	Y+19, r24	; 0x13
    15de:	0f c0       	rjmp	.+30     	; 0x15fe <LCD_DisplayCharacter+0x2b6>
    15e0:	88 ec       	ldi	r24, 0xC8	; 200
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	9a 8b       	std	Y+18, r25	; 0x12
    15e6:	89 8b       	std	Y+17, r24	; 0x11
    15e8:	89 89       	ldd	r24, Y+17	; 0x11
    15ea:	9a 89       	ldd	r25, Y+18	; 0x12
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <LCD_DisplayCharacter+0x2a4>
    15f0:	9a 8b       	std	Y+18, r25	; 0x12
    15f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f4:	8b 89       	ldd	r24, Y+19	; 0x13
    15f6:	9c 89       	ldd	r25, Y+20	; 0x14
    15f8:	01 97       	sbiw	r24, 0x01	; 1
    15fa:	9c 8b       	std	Y+20, r25	; 0x14
    15fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1600:	9c 89       	ldd	r25, Y+20	; 0x14
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	69 f7       	brne	.-38     	; 0x15e0 <LCD_DisplayCharacter+0x298>
    1606:	14 c0       	rjmp	.+40     	; 0x1630 <LCD_DisplayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1608:	6d 89       	ldd	r22, Y+21	; 0x15
    160a:	7e 89       	ldd	r23, Y+22	; 0x16
    160c:	8f 89       	ldd	r24, Y+23	; 0x17
    160e:	98 8d       	ldd	r25, Y+24	; 0x18
    1610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	9c 8b       	std	Y+20, r25	; 0x14
    161a:	8b 8b       	std	Y+19, r24	; 0x13
    161c:	8b 89       	ldd	r24, Y+19	; 0x13
    161e:	9c 89       	ldd	r25, Y+20	; 0x14
    1620:	98 8b       	std	Y+16, r25	; 0x10
    1622:	8f 87       	std	Y+15, r24	; 0x0f
    1624:	8f 85       	ldd	r24, Y+15	; 0x0f
    1626:	98 89       	ldd	r25, Y+16	; 0x10
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	f1 f7       	brne	.-4      	; 0x1628 <LCD_DisplayCharacter+0x2e0>
    162c:	98 8b       	std	Y+16, r25	; 0x10
    162e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	GPIO_writePin(ControlPort, EN, Low);
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	62 e0       	ldi	r22, 0x02	; 2
    1634:	40 e0       	ldi	r20, 0x00	; 0
    1636:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <GPIO_writePin>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e8       	ldi	r26, 0x80	; 128
    1640:	bf e3       	ldi	r27, 0x3F	; 63
    1642:	8b 87       	std	Y+11, r24	; 0x0b
    1644:	9c 87       	std	Y+12, r25	; 0x0c
    1646:	ad 87       	std	Y+13, r26	; 0x0d
    1648:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    164a:	6b 85       	ldd	r22, Y+11	; 0x0b
    164c:	7c 85       	ldd	r23, Y+12	; 0x0c
    164e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1650:	9e 85       	ldd	r25, Y+14	; 0x0e
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	4a ef       	ldi	r20, 0xFA	; 250
    1658:	54 e4       	ldi	r21, 0x44	; 68
    165a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	8f 83       	std	Y+7, r24	; 0x07
    1664:	98 87       	std	Y+8, r25	; 0x08
    1666:	a9 87       	std	Y+9, r26	; 0x09
    1668:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    166a:	6f 81       	ldd	r22, Y+7	; 0x07
    166c:	78 85       	ldd	r23, Y+8	; 0x08
    166e:	89 85       	ldd	r24, Y+9	; 0x09
    1670:	9a 85       	ldd	r25, Y+10	; 0x0a
    1672:	20 e0       	ldi	r18, 0x00	; 0
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	40 e8       	ldi	r20, 0x80	; 128
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    167e:	88 23       	and	r24, r24
    1680:	2c f4       	brge	.+10     	; 0x168c <LCD_DisplayCharacter+0x344>
		__ticks = 1;
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	9e 83       	std	Y+6, r25	; 0x06
    1688:	8d 83       	std	Y+5, r24	; 0x05
    168a:	3f c0       	rjmp	.+126    	; 0x170a <LCD_DisplayCharacter+0x3c2>
	else if (__tmp > 65535)
    168c:	6f 81       	ldd	r22, Y+7	; 0x07
    168e:	78 85       	ldd	r23, Y+8	; 0x08
    1690:	89 85       	ldd	r24, Y+9	; 0x09
    1692:	9a 85       	ldd	r25, Y+10	; 0x0a
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	3f ef       	ldi	r19, 0xFF	; 255
    1698:	4f e7       	ldi	r20, 0x7F	; 127
    169a:	57 e4       	ldi	r21, 0x47	; 71
    169c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a0:	18 16       	cp	r1, r24
    16a2:	4c f5       	brge	.+82     	; 0x16f6 <LCD_DisplayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e2       	ldi	r20, 0x20	; 32
    16b2:	51 e4       	ldi	r21, 0x41	; 65
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	bc 01       	movw	r22, r24
    16be:	cd 01       	movw	r24, r26
    16c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	9e 83       	std	Y+6, r25	; 0x06
    16ca:	8d 83       	std	Y+5, r24	; 0x05
    16cc:	0f c0       	rjmp	.+30     	; 0x16ec <LCD_DisplayCharacter+0x3a4>
    16ce:	88 ec       	ldi	r24, 0xC8	; 200
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	9c 83       	std	Y+4, r25	; 0x04
    16d4:	8b 83       	std	Y+3, r24	; 0x03
    16d6:	8b 81       	ldd	r24, Y+3	; 0x03
    16d8:	9c 81       	ldd	r25, Y+4	; 0x04
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCD_DisplayCharacter+0x392>
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	00 97       	sbiw	r24, 0x00	; 0
    16f2:	69 f7       	brne	.-38     	; 0x16ce <LCD_DisplayCharacter+0x386>
    16f4:	14 c0       	rjmp	.+40     	; 0x171e <LCD_DisplayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16f6:	6f 81       	ldd	r22, Y+7	; 0x07
    16f8:	78 85       	ldd	r23, Y+8	; 0x08
    16fa:	89 85       	ldd	r24, Y+9	; 0x09
    16fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	9a 83       	std	Y+2, r25	; 0x02
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	89 81       	ldd	r24, Y+1	; 0x01
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <LCD_DisplayCharacter+0x3ce>
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    171e:	e9 96       	adiw	r28, 0x39	; 57
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	de bf       	out	0x3e, r29	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	cd bf       	out	0x3d, r28	; 61
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <LCD_Displaystring>:

void LCD_Displaystring(const u8 *c)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <LCD_Displaystring+0x6>
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	9b 83       	std	Y+3, r25	; 0x03
    173e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1740:	19 82       	std	Y+1, r1	; 0x01
    1742:	0e c0       	rjmp	.+28     	; 0x1760 <LCD_Displaystring+0x30>
	while(c[i] != NULL)
	{
		LCD_DisplayCharacter(c[i]);
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	9b 81       	ldd	r25, Y+3	; 0x03
    174e:	fc 01       	movw	r30, r24
    1750:	e2 0f       	add	r30, r18
    1752:	f3 1f       	adc	r31, r19
    1754:	80 81       	ld	r24, Z
    1756:	0e 94 a4 09 	call	0x1348	; 0x1348 <LCD_DisplayCharacter>
		i++;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	8f 5f       	subi	r24, 0xFF	; 255
    175e:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_Displaystring(const u8 *c)
{
	u8 i = 0;
	while(c[i] != NULL)
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	9b 81       	ldd	r25, Y+3	; 0x03
    176a:	fc 01       	movw	r30, r24
    176c:	e2 0f       	add	r30, r18
    176e:	f3 1f       	adc	r31, r19
    1770:	80 81       	ld	r24, Z
    1772:	88 2f       	mov	r24, r24
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	00 97       	sbiw	r24, 0x00	; 0
    1778:	29 f7       	brne	.-54     	; 0x1744 <LCD_Displaystring+0x14>
	{
		LCD_DisplayCharacter(c[i]);
		i++;
	}
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <LCD_MoveCursor>:

void LCD_MoveCursor(u8 row, u8 col)
{
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	00 d0       	rcall	.+0      	; 0x178c <LCD_MoveCursor+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <LCD_MoveCursor+0x8>
    178e:	0f 92       	push	r0
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	8a 83       	std	Y+2, r24	; 0x02
    1796:	6b 83       	std	Y+3, r22	; 0x03
	u8 Mem_Adrs;
	switch(row)
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	3d 83       	std	Y+5, r19	; 0x05
    17a0:	2c 83       	std	Y+4, r18	; 0x04
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	91 05       	cpc	r25, r1
    17aa:	c1 f0       	breq	.+48     	; 0x17dc <LCD_MoveCursor+0x56>
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	2c f4       	brge	.+10     	; 0x17c0 <LCD_MoveCursor+0x3a>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	61 f0       	breq	.+24     	; 0x17d6 <LCD_MoveCursor+0x50>
    17be:	19 c0       	rjmp	.+50     	; 0x17f2 <LCD_MoveCursor+0x6c>
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	22 30       	cpi	r18, 0x02	; 2
    17c6:	31 05       	cpc	r19, r1
    17c8:	69 f0       	breq	.+26     	; 0x17e4 <LCD_MoveCursor+0x5e>
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	9d 81       	ldd	r25, Y+5	; 0x05
    17ce:	83 30       	cpi	r24, 0x03	; 3
    17d0:	91 05       	cpc	r25, r1
    17d2:	61 f0       	breq	.+24     	; 0x17ec <LCD_MoveCursor+0x66>
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <LCD_MoveCursor+0x6c>
	{
	case 0:
		Mem_Adrs = col;
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	89 83       	std	Y+1, r24	; 0x01
    17da:	0b c0       	rjmp	.+22     	; 0x17f2 <LCD_MoveCursor+0x6c>
		break;
	case 1:
		Mem_Adrs = col + 0x40;
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	80 5c       	subi	r24, 0xC0	; 192
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	07 c0       	rjmp	.+14     	; 0x17f2 <LCD_MoveCursor+0x6c>
		break;
	case 2:
		Mem_Adrs = col + 0x10;
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	80 5f       	subi	r24, 0xF0	; 240
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	03 c0       	rjmp	.+6      	; 0x17f2 <LCD_MoveCursor+0x6c>
		break;
	case 3:
		Mem_Adrs = col + 0x50;
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	80 5b       	subi	r24, 0xB0	; 176
    17f0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(Mem_Adrs | LCD_Cursor_Location);
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <LCD_sendCommand>
}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <LCD_DispayStringRowColumn>:

void LCD_DispayStringRowColumn(const u8 * c, u8 row, u8 col)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <LCD_DispayStringRowColumn+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <LCD_DispayStringRowColumn+0x8>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	89 83       	std	Y+1, r24	; 0x01
    181a:	6b 83       	std	Y+3, r22	; 0x03
    181c:	4c 83       	std	Y+4, r20	; 0x04
	LCD_MoveCursor(row,col);
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	6c 81       	ldd	r22, Y+4	; 0x04
    1822:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_MoveCursor>
	LCD_Displaystring(c);
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	9a 81       	ldd	r25, Y+2	; 0x02
    182a:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_Displaystring>
}
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <LCD_Clear>:

void LCD_Clear()
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	cd b7       	in	r28, 0x3d	; 61
    1842:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_ClearScreen);
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	0e 94 b0 07 	call	0xf60	; 0xf60 <LCD_sendCommand>
}
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	08 95       	ret

00001850 <LCD_Int_to_Str>:

void LCD_Int_to_Str(int data)
{
    1850:	df 93       	push	r29
    1852:	cf 93       	push	r28
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	62 97       	sbiw	r28, 0x12	; 18
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	9a 8b       	std	Y+18, r25	; 0x12
    1866:	89 8b       	std	Y+17, r24	; 0x11
	u8 buffer[16];
	itoa(data,buffer,10);
    1868:	89 89       	ldd	r24, Y+17	; 0x11
    186a:	9a 89       	ldd	r25, Y+18	; 0x12
    186c:	9e 01       	movw	r18, r28
    186e:	2f 5f       	subi	r18, 0xFF	; 255
    1870:	3f 4f       	sbci	r19, 0xFF	; 255
    1872:	b9 01       	movw	r22, r18
    1874:	4a e0       	ldi	r20, 0x0A	; 10
    1876:	50 e0       	ldi	r21, 0x00	; 0
    1878:	0e 94 c7 10 	call	0x218e	; 0x218e <itoa>
	LCD_Displaystring(buffer);
    187c:	ce 01       	movw	r24, r28
    187e:	01 96       	adiw	r24, 0x01	; 1
    1880:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_Displaystring>
}
    1884:	62 96       	adiw	r28, 0x12	; 18
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <GPIO_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setPinDirection(GPIO_PORT port, u8 pin, GPIO_directionType direction)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <GPIO_setPinDirection+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <GPIO_setPinDirection+0x8>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	6a 83       	std	Y+2, r22	; 0x02
    18a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin < NUM_OF_PINS_PER_PORT) || (port < NUM_OF_PORTS))
    18aa:	8a 81       	ldd	r24, Y+2	; 0x02
    18ac:	88 30       	cpi	r24, 0x08	; 8
    18ae:	20 f0       	brcs	.+8      	; 0x18b8 <GPIO_setPinDirection+0x22>
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <GPIO_setPinDirection+0x22>
    18b6:	d1 c0       	rjmp	.+418    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
	{

		/* Setup the pin direction as required */
		switch(port)
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	8c 81       	ldd	r24, Y+4	; 0x04
    18c4:	9d 81       	ldd	r25, Y+5	; 0x05
    18c6:	81 30       	cpi	r24, 0x01	; 1
    18c8:	91 05       	cpc	r25, r1
    18ca:	09 f4       	brne	.+2      	; 0x18ce <GPIO_setPinDirection+0x38>
    18cc:	43 c0       	rjmp	.+134    	; 0x1954 <GPIO_setPinDirection+0xbe>
    18ce:	2c 81       	ldd	r18, Y+4	; 0x04
    18d0:	3d 81       	ldd	r19, Y+5	; 0x05
    18d2:	22 30       	cpi	r18, 0x02	; 2
    18d4:	31 05       	cpc	r19, r1
    18d6:	2c f4       	brge	.+10     	; 0x18e2 <GPIO_setPinDirection+0x4c>
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	9d 81       	ldd	r25, Y+5	; 0x05
    18dc:	00 97       	sbiw	r24, 0x00	; 0
    18de:	71 f0       	breq	.+28     	; 0x18fc <GPIO_setPinDirection+0x66>
    18e0:	bc c0       	rjmp	.+376    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
    18e2:	2c 81       	ldd	r18, Y+4	; 0x04
    18e4:	3d 81       	ldd	r19, Y+5	; 0x05
    18e6:	22 30       	cpi	r18, 0x02	; 2
    18e8:	31 05       	cpc	r19, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <GPIO_setPinDirection+0x58>
    18ec:	5f c0       	rjmp	.+190    	; 0x19ac <GPIO_setPinDirection+0x116>
    18ee:	8c 81       	ldd	r24, Y+4	; 0x04
    18f0:	9d 81       	ldd	r25, Y+5	; 0x05
    18f2:	83 30       	cpi	r24, 0x03	; 3
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <GPIO_setPinDirection+0x64>
    18f8:	85 c0       	rjmp	.+266    	; 0x1a04 <GPIO_setPinDirection+0x16e>
    18fa:	af c0       	rjmp	.+350    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
		{
		case A:
			if(direction == OUTPUT)
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	a1 f4       	brne	.+40     	; 0x192a <GPIO_setPinDirection+0x94>
			{
				SET_Bit(DDRA,pin);
    1902:	aa e3       	ldi	r26, 0x3A	; 58
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ea e3       	ldi	r30, 0x3A	; 58
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_setPinDirection+0x8a>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_setPinDirection+0x86>
    1924:	84 2b       	or	r24, r20
    1926:	8c 93       	st	X, r24
    1928:	98 c0       	rjmp	.+304    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRA,pin);
    192a:	aa e3       	ldi	r26, 0x3A	; 58
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ea e3       	ldi	r30, 0x3A	; 58
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_setPinDirection+0xb2>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_setPinDirection+0xae>
    194c:	80 95       	com	r24
    194e:	84 23       	and	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	83 c0       	rjmp	.+262    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
			}
			break;
		case B:
			if(direction == OUTPUT)
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	a1 f4       	brne	.+40     	; 0x1982 <GPIO_setPinDirection+0xec>
			{
				SET_Bit(DDRB,pin);
    195a:	a7 e3       	ldi	r26, 0x37	; 55
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e7 e3       	ldi	r30, 0x37	; 55
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_setPinDirection+0xe2>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_setPinDirection+0xde>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	6c c0       	rjmp	.+216    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRB,pin);
    1982:	a7 e3       	ldi	r26, 0x37	; 55
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e7 e3       	ldi	r30, 0x37	; 55
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	48 2f       	mov	r20, r24
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	28 2f       	mov	r18, r24
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 2e       	mov	r0, r18
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <GPIO_setPinDirection+0x10a>
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <GPIO_setPinDirection+0x106>
    19a4:	80 95       	com	r24
    19a6:	84 23       	and	r24, r20
    19a8:	8c 93       	st	X, r24
    19aa:	57 c0       	rjmp	.+174    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
			}
			break;
		case C:
			if(direction == OUTPUT)
    19ac:	8b 81       	ldd	r24, Y+3	; 0x03
    19ae:	81 30       	cpi	r24, 0x01	; 1
    19b0:	a1 f4       	brne	.+40     	; 0x19da <GPIO_setPinDirection+0x144>
			{
				SET_Bit(DDRC,pin);
    19b2:	a4 e3       	ldi	r26, 0x34	; 52
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e4 e3       	ldi	r30, 0x34	; 52
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	48 2f       	mov	r20, r24
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 2e       	mov	r0, r18
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <GPIO_setPinDirection+0x13a>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	0a 94       	dec	r0
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <GPIO_setPinDirection+0x136>
    19d4:	84 2b       	or	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	40 c0       	rjmp	.+128    	; 0x1a5a <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRC,pin);
    19da:	a4 e3       	ldi	r26, 0x34	; 52
    19dc:	b0 e0       	ldi	r27, 0x00	; 0
    19de:	e4 e3       	ldi	r30, 0x34	; 52
    19e0:	f0 e0       	ldi	r31, 0x00	; 0
    19e2:	80 81       	ld	r24, Z
    19e4:	48 2f       	mov	r20, r24
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	02 2e       	mov	r0, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <GPIO_setPinDirection+0x162>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	0a 94       	dec	r0
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <GPIO_setPinDirection+0x15e>
    19fc:	80 95       	com	r24
    19fe:	84 23       	and	r24, r20
    1a00:	8c 93       	st	X, r24
    1a02:	2b c0       	rjmp	.+86     	; 0x1a5a <GPIO_setPinDirection+0x1c4>
			}
			break;
		case D:
			if(direction == OUTPUT)
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	a1 f4       	brne	.+40     	; 0x1a32 <GPIO_setPinDirection+0x19c>
			{
				SET_Bit(DDRD,pin);
    1a0a:	a1 e3       	ldi	r26, 0x31	; 49
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e1 e3       	ldi	r30, 0x31	; 49
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	48 2f       	mov	r20, r24
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 2e       	mov	r0, r18
    1a22:	02 c0       	rjmp	.+4      	; 0x1a28 <GPIO_setPinDirection+0x192>
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	0a 94       	dec	r0
    1a2a:	e2 f7       	brpl	.-8      	; 0x1a24 <GPIO_setPinDirection+0x18e>
    1a2c:	84 2b       	or	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	14 c0       	rjmp	.+40     	; 0x1a5a <GPIO_setPinDirection+0x1c4>
			}
			else
			{
				CLR_Bit(DDRD,pin);
    1a32:	a1 e3       	ldi	r26, 0x31	; 49
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e1 e3       	ldi	r30, 0x31	; 49
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	48 2f       	mov	r20, r24
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <GPIO_setPinDirection+0x1ba>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <GPIO_setPinDirection+0x1b6>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(GPIO_PORT port, u8 pin, u8 value)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_writePin+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <GPIO_writePin+0x8>
    1a72:	0f 92       	push	r0
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	6a 83       	std	Y+2, r22	; 0x02
    1a7c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin < NUM_OF_PINS_PER_PORT) || (port < NUM_OF_PORTS))
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	88 30       	cpi	r24, 0x08	; 8
    1a82:	20 f0       	brcs	.+8      	; 0x1a8c <GPIO_writePin+0x22>
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	84 30       	cpi	r24, 0x04	; 4
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <GPIO_writePin+0x22>
    1a8a:	d1 c0       	rjmp	.+418    	; 0x1c2e <GPIO_writePin+0x1c4>
	{
		/* Write the pin value as required */
		switch(port)
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	3d 83       	std	Y+5, r19	; 0x05
    1a94:	2c 83       	std	Y+4, r18	; 0x04
    1a96:	8c 81       	ldd	r24, Y+4	; 0x04
    1a98:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <GPIO_writePin+0x38>
    1aa0:	43 c0       	rjmp	.+134    	; 0x1b28 <GPIO_writePin+0xbe>
    1aa2:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa4:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <GPIO_writePin+0x4c>
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	71 f0       	breq	.+28     	; 0x1ad0 <GPIO_writePin+0x66>
    1ab4:	bc c0       	rjmp	.+376    	; 0x1c2e <GPIO_writePin+0x1c4>
    1ab6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aba:	22 30       	cpi	r18, 0x02	; 2
    1abc:	31 05       	cpc	r19, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <GPIO_writePin+0x58>
    1ac0:	5f c0       	rjmp	.+190    	; 0x1b80 <GPIO_writePin+0x116>
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	91 05       	cpc	r25, r1
    1aca:	09 f4       	brne	.+2      	; 0x1ace <GPIO_writePin+0x64>
    1acc:	85 c0       	rjmp	.+266    	; 0x1bd8 <GPIO_writePin+0x16e>
    1ace:	af c0       	rjmp	.+350    	; 0x1c2e <GPIO_writePin+0x1c4>
		{
		case A:
			if(value == High)
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	a1 f4       	brne	.+40     	; 0x1afe <GPIO_writePin+0x94>
			{
				SET_Bit(PORTA,pin);
    1ad6:	ab e3       	ldi	r26, 0x3B	; 59
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	eb e3       	ldi	r30, 0x3B	; 59
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	48 2f       	mov	r20, r24
    1ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae4:	28 2f       	mov	r18, r24
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	02 2e       	mov	r0, r18
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <GPIO_writePin+0x8a>
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	0a 94       	dec	r0
    1af6:	e2 f7       	brpl	.-8      	; 0x1af0 <GPIO_writePin+0x86>
    1af8:	84 2b       	or	r24, r20
    1afa:	8c 93       	st	X, r24
    1afc:	98 c0       	rjmp	.+304    	; 0x1c2e <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTA,pin);
    1afe:	ab e3       	ldi	r26, 0x3B	; 59
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	eb e3       	ldi	r30, 0x3B	; 59
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	02 2e       	mov	r0, r18
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <GPIO_writePin+0xb2>
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	0a 94       	dec	r0
    1b1e:	e2 f7       	brpl	.-8      	; 0x1b18 <GPIO_writePin+0xae>
    1b20:	80 95       	com	r24
    1b22:	84 23       	and	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	83 c0       	rjmp	.+262    	; 0x1c2e <GPIO_writePin+0x1c4>
			}
			break;
		case B:
			if(value == High)
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	81 30       	cpi	r24, 0x01	; 1
    1b2c:	a1 f4       	brne	.+40     	; 0x1b56 <GPIO_writePin+0xec>
			{
				SET_Bit(PORTB,pin);
    1b2e:	a8 e3       	ldi	r26, 0x38	; 56
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	e8 e3       	ldi	r30, 0x38	; 56
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GPIO_writePin+0xe2>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GPIO_writePin+0xde>
    1b50:	84 2b       	or	r24, r20
    1b52:	8c 93       	st	X, r24
    1b54:	6c c0       	rjmp	.+216    	; 0x1c2e <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTB,pin);
    1b56:	a8 e3       	ldi	r26, 0x38	; 56
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e8 e3       	ldi	r30, 0x38	; 56
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	02 2e       	mov	r0, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <GPIO_writePin+0x10a>
    1b70:	88 0f       	add	r24, r24
    1b72:	99 1f       	adc	r25, r25
    1b74:	0a 94       	dec	r0
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <GPIO_writePin+0x106>
    1b78:	80 95       	com	r24
    1b7a:	84 23       	and	r24, r20
    1b7c:	8c 93       	st	X, r24
    1b7e:	57 c0       	rjmp	.+174    	; 0x1c2e <GPIO_writePin+0x1c4>
			}
			break;
		case C:
			if(value == High)
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	81 30       	cpi	r24, 0x01	; 1
    1b84:	a1 f4       	brne	.+40     	; 0x1bae <GPIO_writePin+0x144>
			{
				SET_Bit(PORTC,pin);
    1b86:	a5 e3       	ldi	r26, 0x35	; 53
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e5 e3       	ldi	r30, 0x35	; 53
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <GPIO_writePin+0x13a>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <GPIO_writePin+0x136>
    1ba8:	84 2b       	or	r24, r20
    1baa:	8c 93       	st	X, r24
    1bac:	40 c0       	rjmp	.+128    	; 0x1c2e <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTC,pin);
    1bae:	a5 e3       	ldi	r26, 0x35	; 53
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e5 e3       	ldi	r30, 0x35	; 53
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	48 2f       	mov	r20, r24
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 2e       	mov	r0, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <GPIO_writePin+0x162>
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	0a 94       	dec	r0
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <GPIO_writePin+0x15e>
    1bd0:	80 95       	com	r24
    1bd2:	84 23       	and	r24, r20
    1bd4:	8c 93       	st	X, r24
    1bd6:	2b c0       	rjmp	.+86     	; 0x1c2e <GPIO_writePin+0x1c4>
			}
			break;
		case D:
			if(value == High)
    1bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bda:	81 30       	cpi	r24, 0x01	; 1
    1bdc:	a1 f4       	brne	.+40     	; 0x1c06 <GPIO_writePin+0x19c>
			{
				SET_Bit(PORTD,pin);
    1bde:	a2 e3       	ldi	r26, 0x32	; 50
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e2 e3       	ldi	r30, 0x32	; 50
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <GPIO_writePin+0x192>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <GPIO_writePin+0x18e>
    1c00:	84 2b       	or	r24, r20
    1c02:	8c 93       	st	X, r24
    1c04:	14 c0       	rjmp	.+40     	; 0x1c2e <GPIO_writePin+0x1c4>
			}
			else
			{
				CLR_Bit(PORTD,pin);
    1c06:	a2 e3       	ldi	r26, 0x32	; 50
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	e2 e3       	ldi	r30, 0x32	; 50
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	80 81       	ld	r24, Z
    1c10:	48 2f       	mov	r20, r24
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	02 2e       	mov	r0, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <GPIO_writePin+0x1ba>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	0a 94       	dec	r0
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <GPIO_writePin+0x1b6>
    1c28:	80 95       	com	r24
    1c2a:	84 23       	and	r24, r20
    1c2c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	0f 90       	pop	r0
    1c36:	0f 90       	pop	r0
    1c38:	cf 91       	pop	r28
    1c3a:	df 91       	pop	r29
    1c3c:	08 95       	ret

00001c3e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
u8 GPIO_readPin(GPIO_PORT port, u8 pin)
{
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	00 d0       	rcall	.+0      	; 0x1c44 <GPIO_readPin+0x6>
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <GPIO_readPin+0x8>
    1c46:	0f 92       	push	r0
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	8a 83       	std	Y+2, r24	; 0x02
    1c4e:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = Low;
    1c50:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin < NUM_OF_PINS_PER_PORT) || (port < NUM_OF_PORTS))
    1c52:	8b 81       	ldd	r24, Y+3	; 0x03
    1c54:	88 30       	cpi	r24, 0x08	; 8
    1c56:	20 f0       	brcs	.+8      	; 0x1c60 <GPIO_readPin+0x22>
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	84 30       	cpi	r24, 0x04	; 4
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <GPIO_readPin+0x22>
    1c5e:	80 c0       	rjmp	.+256    	; 0x1d60 <GPIO_readPin+0x122>
	{
		/* Read the pin value as required */
		switch(port)
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	3d 83       	std	Y+5, r19	; 0x05
    1c68:	2c 83       	std	Y+4, r18	; 0x04
    1c6a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c6c:	5d 81       	ldd	r21, Y+5	; 0x05
    1c6e:	41 30       	cpi	r20, 0x01	; 1
    1c70:	51 05       	cpc	r21, r1
    1c72:	79 f1       	breq	.+94     	; 0x1cd2 <GPIO_readPin+0x94>
    1c74:	8c 81       	ldd	r24, Y+4	; 0x04
    1c76:	9d 81       	ldd	r25, Y+5	; 0x05
    1c78:	82 30       	cpi	r24, 0x02	; 2
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	34 f4       	brge	.+12     	; 0x1c8a <GPIO_readPin+0x4c>
    1c7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1c80:	3d 81       	ldd	r19, Y+5	; 0x05
    1c82:	21 15       	cp	r18, r1
    1c84:	31 05       	cpc	r19, r1
    1c86:	69 f0       	breq	.+26     	; 0x1ca2 <GPIO_readPin+0x64>
    1c88:	6b c0       	rjmp	.+214    	; 0x1d60 <GPIO_readPin+0x122>
    1c8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1c8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1c8e:	42 30       	cpi	r20, 0x02	; 2
    1c90:	51 05       	cpc	r21, r1
    1c92:	b9 f1       	breq	.+110    	; 0x1d02 <GPIO_readPin+0xc4>
    1c94:	8c 81       	ldd	r24, Y+4	; 0x04
    1c96:	9d 81       	ldd	r25, Y+5	; 0x05
    1c98:	83 30       	cpi	r24, 0x03	; 3
    1c9a:	91 05       	cpc	r25, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <GPIO_readPin+0x62>
    1c9e:	49 c0       	rjmp	.+146    	; 0x1d32 <GPIO_readPin+0xf4>
    1ca0:	5f c0       	rjmp	.+190    	; 0x1d60 <GPIO_readPin+0x122>
		{
		case A:
			if(isSET(PINA,pin))
    1ca2:	e9 e3       	ldi	r30, 0x39	; 57
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a9 01       	movw	r20, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <GPIO_readPin+0x7c>
    1cb6:	55 95       	asr	r21
    1cb8:	47 95       	ror	r20
    1cba:	8a 95       	dec	r24
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <GPIO_readPin+0x78>
    1cbe:	ca 01       	movw	r24, r20
    1cc0:	81 70       	andi	r24, 0x01	; 1
    1cc2:	90 70       	andi	r25, 0x00	; 0
    1cc4:	88 23       	and	r24, r24
    1cc6:	19 f0       	breq	.+6      	; 0x1cce <GPIO_readPin+0x90>
			{
				pin_value = High;
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	49 c0       	rjmp	.+146    	; 0x1d60 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1cce:	19 82       	std	Y+1, r1	; 0x01
    1cd0:	47 c0       	rjmp	.+142    	; 0x1d60 <GPIO_readPin+0x122>
			}
			break;
		case B:
			if(isSET(PINB,pin))
    1cd2:	e6 e3       	ldi	r30, 0x36	; 54
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <GPIO_readPin+0xac>
    1ce6:	55 95       	asr	r21
    1ce8:	47 95       	ror	r20
    1cea:	8a 95       	dec	r24
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <GPIO_readPin+0xa8>
    1cee:	ca 01       	movw	r24, r20
    1cf0:	81 70       	andi	r24, 0x01	; 1
    1cf2:	90 70       	andi	r25, 0x00	; 0
    1cf4:	88 23       	and	r24, r24
    1cf6:	19 f0       	breq	.+6      	; 0x1cfe <GPIO_readPin+0xc0>
			{
				pin_value = High;
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	31 c0       	rjmp	.+98     	; 0x1d60 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1cfe:	19 82       	std	Y+1, r1	; 0x01
    1d00:	2f c0       	rjmp	.+94     	; 0x1d60 <GPIO_readPin+0x122>
			}
			break;
		case C:
			if(isSET(PINC,pin))
    1d02:	e3 e3       	ldi	r30, 0x33	; 51
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	a9 01       	movw	r20, r18
    1d14:	02 c0       	rjmp	.+4      	; 0x1d1a <GPIO_readPin+0xdc>
    1d16:	55 95       	asr	r21
    1d18:	47 95       	ror	r20
    1d1a:	8a 95       	dec	r24
    1d1c:	e2 f7       	brpl	.-8      	; 0x1d16 <GPIO_readPin+0xd8>
    1d1e:	ca 01       	movw	r24, r20
    1d20:	81 70       	andi	r24, 0x01	; 1
    1d22:	90 70       	andi	r25, 0x00	; 0
    1d24:	88 23       	and	r24, r24
    1d26:	19 f0       	breq	.+6      	; 0x1d2e <GPIO_readPin+0xf0>
			{
				pin_value = High;
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	89 83       	std	Y+1, r24	; 0x01
    1d2c:	19 c0       	rjmp	.+50     	; 0x1d60 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1d2e:	19 82       	std	Y+1, r1	; 0x01
    1d30:	17 c0       	rjmp	.+46     	; 0x1d60 <GPIO_readPin+0x122>
			}
			break;
		case D:
			if(isSET(PIND,pin))
    1d32:	e0 e3       	ldi	r30, 0x30	; 48
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a9 01       	movw	r20, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <GPIO_readPin+0x10c>
    1d46:	55 95       	asr	r21
    1d48:	47 95       	ror	r20
    1d4a:	8a 95       	dec	r24
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <GPIO_readPin+0x108>
    1d4e:	ca 01       	movw	r24, r20
    1d50:	81 70       	andi	r24, 0x01	; 1
    1d52:	90 70       	andi	r25, 0x00	; 0
    1d54:	88 23       	and	r24, r24
    1d56:	19 f0       	breq	.+6      	; 0x1d5e <GPIO_readPin+0x120>
			{
				pin_value = High;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <GPIO_readPin+0x122>
			}
			else
			{
				pin_value = Low;
    1d5e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <GPIO_setPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setPortDirection(GPIO_PORT port, GPIO_directionType direction)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <GPIO_setPortDirection+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <GPIO_setPortDirection+0x8>
    1d7a:	cd b7       	in	r28, 0x3d	; 61
    1d7c:	de b7       	in	r29, 0x3e	; 62
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port < NUM_OF_PORTS)
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	84 30       	cpi	r24, 0x04	; 4
    1d86:	90 f5       	brcc	.+100    	; 0x1dec <GPIO_setPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port)
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3c 83       	std	Y+4, r19	; 0x04
    1d90:	2b 83       	std	Y+3, r18	; 0x03
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	9c 81       	ldd	r25, Y+4	; 0x04
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	91 05       	cpc	r25, r1
    1d9a:	d1 f0       	breq	.+52     	; 0x1dd0 <GPIO_setPortDirection+0x5e>
    1d9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1da0:	22 30       	cpi	r18, 0x02	; 2
    1da2:	31 05       	cpc	r19, r1
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <GPIO_setPortDirection+0x3e>
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	61 f0       	breq	.+24     	; 0x1dc6 <GPIO_setPortDirection+0x54>
    1dae:	1e c0       	rjmp	.+60     	; 0x1dec <GPIO_setPortDirection+0x7a>
    1db0:	2b 81       	ldd	r18, Y+3	; 0x03
    1db2:	3c 81       	ldd	r19, Y+4	; 0x04
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	81 f0       	breq	.+32     	; 0x1dda <GPIO_setPortDirection+0x68>
    1dba:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbe:	83 30       	cpi	r24, 0x03	; 3
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	81 f0       	breq	.+32     	; 0x1de4 <GPIO_setPortDirection+0x72>
    1dc4:	13 c0       	rjmp	.+38     	; 0x1dec <GPIO_setPortDirection+0x7a>
		{
		case A:
			DDRA = 0xFF;
    1dc6:	ea e3       	ldi	r30, 0x3A	; 58
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	8f ef       	ldi	r24, 0xFF	; 255
    1dcc:	80 83       	st	Z, r24
    1dce:	0e c0       	rjmp	.+28     	; 0x1dec <GPIO_setPortDirection+0x7a>
			break;
		case B:
			DDRB = 0xFF;
    1dd0:	e7 e3       	ldi	r30, 0x37	; 55
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	8f ef       	ldi	r24, 0xFF	; 255
    1dd6:	80 83       	st	Z, r24
    1dd8:	09 c0       	rjmp	.+18     	; 0x1dec <GPIO_setPortDirection+0x7a>
			break;
		case C:
			DDRC = 0xFF;
    1dda:	e4 e3       	ldi	r30, 0x34	; 52
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	80 83       	st	Z, r24
    1de2:	04 c0       	rjmp	.+8      	; 0x1dec <GPIO_setPortDirection+0x7a>
			break;
		case D:
			DDRD = 0xFF;
    1de4:	e1 e3       	ldi	r30, 0x31	; 49
    1de6:	f0 e0       	ldi	r31, 0x00	; 0
    1de8:	8f ef       	ldi	r24, 0xFF	; 255
    1dea:	80 83       	st	Z, r24
			break;
		}
	}
}
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(GPIO_PORT port, u8 value)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <GPIO_writePort+0x6>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <GPIO_writePort+0x8>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port < NUM_OF_PORTS)
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	84 30       	cpi	r24, 0x04	; 4
    1e0e:	90 f5       	brcc	.+100    	; 0x1e74 <GPIO_writePort+0x7a>
	{
		/* Write the port value as required */
		switch(port)
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	3c 83       	std	Y+4, r19	; 0x04
    1e18:	2b 83       	std	Y+3, r18	; 0x03
    1e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1e:	81 30       	cpi	r24, 0x01	; 1
    1e20:	91 05       	cpc	r25, r1
    1e22:	d1 f0       	breq	.+52     	; 0x1e58 <GPIO_writePort+0x5e>
    1e24:	2b 81       	ldd	r18, Y+3	; 0x03
    1e26:	3c 81       	ldd	r19, Y+4	; 0x04
    1e28:	22 30       	cpi	r18, 0x02	; 2
    1e2a:	31 05       	cpc	r19, r1
    1e2c:	2c f4       	brge	.+10     	; 0x1e38 <GPIO_writePort+0x3e>
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	9c 81       	ldd	r25, Y+4	; 0x04
    1e32:	00 97       	sbiw	r24, 0x00	; 0
    1e34:	61 f0       	breq	.+24     	; 0x1e4e <GPIO_writePort+0x54>
    1e36:	1e c0       	rjmp	.+60     	; 0x1e74 <GPIO_writePort+0x7a>
    1e38:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <GPIO_writePort+0x68>
    1e42:	8b 81       	ldd	r24, Y+3	; 0x03
    1e44:	9c 81       	ldd	r25, Y+4	; 0x04
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	91 05       	cpc	r25, r1
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <GPIO_writePort+0x72>
    1e4c:	13 c0       	rjmp	.+38     	; 0x1e74 <GPIO_writePort+0x7a>
		{
		case A:
			PORTA = value;
    1e4e:	eb e3       	ldi	r30, 0x3B	; 59
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	80 83       	st	Z, r24
    1e56:	0e c0       	rjmp	.+28     	; 0x1e74 <GPIO_writePort+0x7a>
			break;
		case B:
			PORTB = value;
    1e58:	e8 e3       	ldi	r30, 0x38	; 56
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	80 83       	st	Z, r24
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <GPIO_writePort+0x7a>
			break;
		case C:
			PORTC = value;
    1e62:	e5 e3       	ldi	r30, 0x35	; 53
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	80 83       	st	Z, r24
    1e6a:	04 c0       	rjmp	.+8      	; 0x1e74 <GPIO_writePort+0x7a>
			break;
		case D:
			PORTD = value;
    1e6c:	e2 e3       	ldi	r30, 0x32	; 50
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
u8 GPIO_readPort(GPIO_PORT port)
{
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	00 d0       	rcall	.+0      	; 0x1e88 <GPIO_readPort+0x6>
    1e88:	00 d0       	rcall	.+0      	; 0x1e8a <GPIO_readPort+0x8>
    1e8a:	cd b7       	in	r28, 0x3d	; 61
    1e8c:	de b7       	in	r29, 0x3e	; 62
    1e8e:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = Low;
    1e90:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port < NUM_OF_PORTS)
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	84 30       	cpi	r24, 0x04	; 4
    1e96:	90 f5       	brcc	.+100    	; 0x1efc <GPIO_readPort+0x7a>
	{
		/* Read the port value as required */
		switch(port)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	3c 83       	std	Y+4, r19	; 0x04
    1ea0:	2b 83       	std	Y+3, r18	; 0x03
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	d1 f0       	breq	.+52     	; 0x1ee0 <GPIO_readPort+0x5e>
    1eac:	2b 81       	ldd	r18, Y+3	; 0x03
    1eae:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <GPIO_readPort+0x3e>
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	61 f0       	breq	.+24     	; 0x1ed6 <GPIO_readPort+0x54>
    1ebe:	1e c0       	rjmp	.+60     	; 0x1efc <GPIO_readPort+0x7a>
    1ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	81 f0       	breq	.+32     	; 0x1eea <GPIO_readPort+0x68>
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	81 f0       	breq	.+32     	; 0x1ef4 <GPIO_readPort+0x72>
    1ed4:	13 c0       	rjmp	.+38     	; 0x1efc <GPIO_readPort+0x7a>
		{
		case A:
			value = PINA;
    1ed6:	e9 e3       	ldi	r30, 0x39	; 57
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	89 83       	std	Y+1, r24	; 0x01
    1ede:	0e c0       	rjmp	.+28     	; 0x1efc <GPIO_readPort+0x7a>
			break;
		case B:
			value = PINB;
    1ee0:	e6 e3       	ldi	r30, 0x36	; 54
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	09 c0       	rjmp	.+18     	; 0x1efc <GPIO_readPort+0x7a>
			break;
		case C:
			value = PINC;
    1eea:	e3 e3       	ldi	r30, 0x33	; 51
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 81       	ld	r24, Z
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	04 c0       	rjmp	.+8      	; 0x1efc <GPIO_readPort+0x7a>
			break;
		case D:
			value = PIND;
    1ef4:	e0 e3       	ldi	r30, 0x30	; 48
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <__vector_5>:
/***********************************************************
 *                     ISR                                 *
 **********************************************************/

ISR(TIMER1_CAPT_vect)
{
    1f0c:	1f 92       	push	r1
    1f0e:	0f 92       	push	r0
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	0f 92       	push	r0
    1f14:	11 24       	eor	r1, r1
    1f16:	2f 93       	push	r18
    1f18:	3f 93       	push	r19
    1f1a:	4f 93       	push	r20
    1f1c:	5f 93       	push	r21
    1f1e:	6f 93       	push	r22
    1f20:	7f 93       	push	r23
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
	if(ICU_CallBack != NULL)
    1f36:	80 91 78 00 	lds	r24, 0x0078
    1f3a:	90 91 79 00 	lds	r25, 0x0079
    1f3e:	00 97       	sbiw	r24, 0x00	; 0
    1f40:	29 f0       	breq	.+10     	; 0x1f4c <__vector_5+0x40>
	{
		/* if the call back function is not NULL then Call it*/
		(*ICU_CallBack)();
    1f42:	e0 91 78 00 	lds	r30, 0x0078
    1f46:	f0 91 79 00 	lds	r31, 0x0079
    1f4a:	09 95       	icall
	}
}
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	ff 91       	pop	r31
    1f52:	ef 91       	pop	r30
    1f54:	bf 91       	pop	r27
    1f56:	af 91       	pop	r26
    1f58:	9f 91       	pop	r25
    1f5a:	8f 91       	pop	r24
    1f5c:	7f 91       	pop	r23
    1f5e:	6f 91       	pop	r22
    1f60:	5f 91       	pop	r21
    1f62:	4f 91       	pop	r20
    1f64:	3f 91       	pop	r19
    1f66:	2f 91       	pop	r18
    1f68:	0f 90       	pop	r0
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	0f 90       	pop	r0
    1f6e:	1f 90       	pop	r1
    1f70:	18 95       	reti

00001f72 <ICU_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ICU_Init(const ICU_Config * Config_Ptr)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	00 d0       	rcall	.+0      	; 0x1f78 <ICU_Init+0x6>
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	9a 83       	std	Y+2, r25	; 0x02
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	/* Set ICP1/PD6 as Input */
	GPIO_setPinDirection(D, PIN6, INPUT);
    1f80:	83 e0       	ldi	r24, 0x03	; 3
    1f82:	66 e0       	ldi	r22, 0x06	; 6
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	0e 94 4b 0c 	call	0x1896	; 0x1896 <GPIO_setPinDirection>

	/* Operating in normal mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1f8a:	ef e4       	ldi	r30, 0x4F	; 79
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	8c e0       	ldi	r24, 0x0C	; 12
    1f90:	80 83       	st	Z, r24

	/*Set the CLock*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1f92:	ae e4       	ldi	r26, 0x4E	; 78
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	ee e4       	ldi	r30, 0x4E	; 78
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	98 2f       	mov	r25, r24
    1f9e:	98 7f       	andi	r25, 0xF8	; 248
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	80 81       	ld	r24, Z
    1fa6:	89 2b       	or	r24, r25
    1fa8:	8c 93       	st	X, r24

	/*Set the required edge either RISING of FALLING*/
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1faa:	ae e4       	ldi	r26, 0x4E	; 78
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	ee e4       	ldi	r30, 0x4E	; 78
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	2f 7b       	andi	r18, 0xBF	; 191
    1fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fba:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbc:	81 81       	ldd	r24, Z+1	; 0x01
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	00 24       	eor	r0, r0
    1fc4:	96 95       	lsr	r25
    1fc6:	87 95       	ror	r24
    1fc8:	07 94       	ror	r0
    1fca:	96 95       	lsr	r25
    1fcc:	87 95       	ror	r24
    1fce:	07 94       	ror	r0
    1fd0:	98 2f       	mov	r25, r24
    1fd2:	80 2d       	mov	r24, r0
    1fd4:	82 2b       	or	r24, r18
    1fd6:	8c 93       	st	X, r24

	/*Set timer to zero*/
	TCNT1 = 0;
    1fd8:	ec e4       	ldi	r30, 0x4C	; 76
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	11 82       	std	Z+1, r1	; 0x01
    1fde:	10 82       	st	Z, r1

	/*Set capture unit to zero*/
	ICR1 = 0;
    1fe0:	e6 e4       	ldi	r30, 0x46	; 70
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	11 82       	std	Z+1, r1	; 0x01
    1fe6:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	SET_Bit(TIMSK, TICIE1);
    1fe8:	a9 e5       	ldi	r26, 0x59	; 89
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e9 e5       	ldi	r30, 0x59	; 89
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	80 62       	ori	r24, 0x20	; 32
    1ff4:	8c 93       	st	X, r24
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	08 95       	ret

00002000 <ICU_setCallBack>:

void ICU_setCallBack(void(*PtrToFunction)(void))
{
    2000:	df 93       	push	r29
    2002:	cf 93       	push	r28
    2004:	00 d0       	rcall	.+0      	; 0x2006 <ICU_setCallBack+0x6>
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	9a 83       	std	Y+2, r25	; 0x02
    200c:	89 83       	std	Y+1, r24	; 0x01
	/*Set address of the call back function*/
	ICU_CallBack = PtrToFunction;
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	90 93 79 00 	sts	0x0079, r25
    2016:	80 93 78 00 	sts	0x0078, r24
}
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	cf 91       	pop	r28
    2020:	df 91       	pop	r29
    2022:	08 95       	ret

00002024 <ICU_setEdgeDetection>:

void ICU_setEdgeDetection(const ICU_Edge edgeType)
{
    2024:	df 93       	push	r29
    2026:	cf 93       	push	r28
    2028:	0f 92       	push	r0
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
    202e:	89 83       	std	Y+1, r24	; 0x01
	/*Set the edge required to be captured*/
	TCCR1B = (TCCR1B & 0xBF) | (edgeType<<6);
    2030:	ae e4       	ldi	r26, 0x4E	; 78
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ee e4       	ldi	r30, 0x4E	; 78
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	28 2f       	mov	r18, r24
    203c:	2f 7b       	andi	r18, 0xBF	; 191
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	00 24       	eor	r0, r0
    2046:	96 95       	lsr	r25
    2048:	87 95       	ror	r24
    204a:	07 94       	ror	r0
    204c:	96 95       	lsr	r25
    204e:	87 95       	ror	r24
    2050:	07 94       	ror	r0
    2052:	98 2f       	mov	r25, r24
    2054:	80 2d       	mov	r24, r0
    2056:	82 2b       	or	r24, r18
    2058:	8c 93       	st	X, r24
}
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	08 95       	ret

00002062 <ICU_getInputCapture>:

u16 ICU_getInputCapture(void)
{
    2062:	df 93       	push	r29
    2064:	cf 93       	push	r28
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    206a:	e6 e4       	ldi	r30, 0x46	; 70
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	91 81       	ldd	r25, Z+1	; 0x01
}
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <ICU_clearTimer>:

void ICU_clearTimer(void)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    2080:	ec e4       	ldi	r30, 0x4C	; 76
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	11 82       	std	Z+1, r1	; 0x01
    2086:	10 82       	st	Z, r1
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <ICU_DeInit>:

void ICU_DeInit(void)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    2096:	ef e4       	ldi	r30, 0x4F	; 79
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	10 82       	st	Z, r1
	TCCR1B = 0;
    209c:	ee e4       	ldi	r30, 0x4E	; 78
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	10 82       	st	Z, r1
	TCNT1 = 0;
    20a2:	ec e4       	ldi	r30, 0x4C	; 76
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	11 82       	std	Z+1, r1	; 0x01
    20a8:	10 82       	st	Z, r1
	ICR1 = 0;
    20aa:	e6 e4       	ldi	r30, 0x46	; 70
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	11 82       	std	Z+1, r1	; 0x01
    20b0:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	CLR_Bit(TIMSK, TICIE1);
    20b2:	a9 e5       	ldi	r26, 0x59	; 89
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e9 e5       	ldi	r30, 0x59	; 89
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	8f 7d       	andi	r24, 0xDF	; 223
    20be:	8c 93       	st	X, r24
}
    20c0:	cf 91       	pop	r28
    20c2:	df 91       	pop	r29
    20c4:	08 95       	ret

000020c6 <main>:
#include "LCD/LCD.h"
#include "avr/interrupt.h"


int main()
{
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	00 d0       	rcall	.+0      	; 0x20cc <main+0x6>
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
	/*Define Variable that will contain the value returned by the
	 * Ultrasonic_readDistance function*/
	u16 dist;

	/*Set the global Interrupt*/
	SREG |= (1<<7);
    20d0:	af e5       	ldi	r26, 0x5F	; 95
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	ef e5       	ldi	r30, 0x5F	; 95
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	80 68       	ori	r24, 0x80	; 128
    20dc:	8c 93       	st	X, r24

	/*Init the LCD to power on */
	LCD_init();
    20de:	0e 94 8d 07 	call	0xf1a	; 0xf1a <LCD_init>

	/*Init the Ultrasonic to read distance*/
	Ultrasonic_Init();
    20e2:	0e 94 4b 07 	call	0xe96	; 0xe96 <Ultrasonic_Init>

	/*Display string*/
	LCD_Displaystring("Distance= ");
    20e6:	80 e6       	ldi	r24, 0x60	; 96
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 98 0b 	call	0x1730	; 0x1730 <LCD_Displaystring>

	/*Function the reads the distance and return the value to the distance variable*/
	dist = Ultrasonic_readDistance();
    20ee:	0e 94 66 07 	call	0xecc	; 0xecc <Ultrasonic_readDistance>
    20f2:	9a 83       	std	Y+2, r25	; 0x02
    20f4:	89 83       	std	Y+1, r24	; 0x01

	/*Display the value on the LCD*/
	LCD_MoveCursor(0,10);
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	6a e0       	ldi	r22, 0x0A	; 10
    20fa:	0e 94 c3 0b 	call	0x1786	; 0x1786 <LCD_MoveCursor>
	LCD_Int_to_Str(dist);
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	0e 94 28 0c 	call	0x1850	; 0x1850 <LCD_Int_to_Str>
    2106:	ff cf       	rjmp	.-2      	; 0x2106 <main+0x40>

00002108 <__udivmodqi4>:
    2108:	99 1b       	sub	r25, r25
    210a:	79 e0       	ldi	r23, 0x09	; 9
    210c:	04 c0       	rjmp	.+8      	; 0x2116 <__udivmodqi4_ep>

0000210e <__udivmodqi4_loop>:
    210e:	99 1f       	adc	r25, r25
    2110:	96 17       	cp	r25, r22
    2112:	08 f0       	brcs	.+2      	; 0x2116 <__udivmodqi4_ep>
    2114:	96 1b       	sub	r25, r22

00002116 <__udivmodqi4_ep>:
    2116:	88 1f       	adc	r24, r24
    2118:	7a 95       	dec	r23
    211a:	c9 f7       	brne	.-14     	; 0x210e <__udivmodqi4_loop>
    211c:	80 95       	com	r24
    211e:	08 95       	ret

00002120 <__prologue_saves__>:
    2120:	2f 92       	push	r2
    2122:	3f 92       	push	r3
    2124:	4f 92       	push	r4
    2126:	5f 92       	push	r5
    2128:	6f 92       	push	r6
    212a:	7f 92       	push	r7
    212c:	8f 92       	push	r8
    212e:	9f 92       	push	r9
    2130:	af 92       	push	r10
    2132:	bf 92       	push	r11
    2134:	cf 92       	push	r12
    2136:	df 92       	push	r13
    2138:	ef 92       	push	r14
    213a:	ff 92       	push	r15
    213c:	0f 93       	push	r16
    213e:	1f 93       	push	r17
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	ca 1b       	sub	r28, r26
    214a:	db 0b       	sbc	r29, r27
    214c:	0f b6       	in	r0, 0x3f	; 63
    214e:	f8 94       	cli
    2150:	de bf       	out	0x3e, r29	; 62
    2152:	0f be       	out	0x3f, r0	; 63
    2154:	cd bf       	out	0x3d, r28	; 61
    2156:	09 94       	ijmp

00002158 <__epilogue_restores__>:
    2158:	2a 88       	ldd	r2, Y+18	; 0x12
    215a:	39 88       	ldd	r3, Y+17	; 0x11
    215c:	48 88       	ldd	r4, Y+16	; 0x10
    215e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2160:	6e 84       	ldd	r6, Y+14	; 0x0e
    2162:	7d 84       	ldd	r7, Y+13	; 0x0d
    2164:	8c 84       	ldd	r8, Y+12	; 0x0c
    2166:	9b 84       	ldd	r9, Y+11	; 0x0b
    2168:	aa 84       	ldd	r10, Y+10	; 0x0a
    216a:	b9 84       	ldd	r11, Y+9	; 0x09
    216c:	c8 84       	ldd	r12, Y+8	; 0x08
    216e:	df 80       	ldd	r13, Y+7	; 0x07
    2170:	ee 80       	ldd	r14, Y+6	; 0x06
    2172:	fd 80       	ldd	r15, Y+5	; 0x05
    2174:	0c 81       	ldd	r16, Y+4	; 0x04
    2176:	1b 81       	ldd	r17, Y+3	; 0x03
    2178:	aa 81       	ldd	r26, Y+2	; 0x02
    217a:	b9 81       	ldd	r27, Y+1	; 0x01
    217c:	ce 0f       	add	r28, r30
    217e:	d1 1d       	adc	r29, r1
    2180:	0f b6       	in	r0, 0x3f	; 63
    2182:	f8 94       	cli
    2184:	de bf       	out	0x3e, r29	; 62
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	ed 01       	movw	r28, r26
    218c:	08 95       	ret

0000218e <itoa>:
    218e:	fb 01       	movw	r30, r22
    2190:	9f 01       	movw	r18, r30
    2192:	e8 94       	clt
    2194:	42 30       	cpi	r20, 0x02	; 2
    2196:	c4 f0       	brlt	.+48     	; 0x21c8 <itoa+0x3a>
    2198:	45 32       	cpi	r20, 0x25	; 37
    219a:	b4 f4       	brge	.+44     	; 0x21c8 <itoa+0x3a>
    219c:	4a 30       	cpi	r20, 0x0A	; 10
    219e:	29 f4       	brne	.+10     	; 0x21aa <itoa+0x1c>
    21a0:	97 fb       	bst	r25, 7
    21a2:	1e f4       	brtc	.+6      	; 0x21aa <itoa+0x1c>
    21a4:	90 95       	com	r25
    21a6:	81 95       	neg	r24
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	64 2f       	mov	r22, r20
    21ac:	77 27       	eor	r23, r23
    21ae:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <__udivmodhi4>
    21b2:	80 5d       	subi	r24, 0xD0	; 208
    21b4:	8a 33       	cpi	r24, 0x3A	; 58
    21b6:	0c f0       	brlt	.+2      	; 0x21ba <itoa+0x2c>
    21b8:	89 5d       	subi	r24, 0xD9	; 217
    21ba:	81 93       	st	Z+, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	00 97       	sbiw	r24, 0x00	; 0
    21c0:	a1 f7       	brne	.-24     	; 0x21aa <itoa+0x1c>
    21c2:	16 f4       	brtc	.+4      	; 0x21c8 <itoa+0x3a>
    21c4:	5d e2       	ldi	r21, 0x2D	; 45
    21c6:	51 93       	st	Z+, r21
    21c8:	10 82       	st	Z, r1
    21ca:	c9 01       	movw	r24, r18
    21cc:	0c 94 e8 10 	jmp	0x21d0	; 0x21d0 <strrev>

000021d0 <strrev>:
    21d0:	dc 01       	movw	r26, r24
    21d2:	fc 01       	movw	r30, r24
    21d4:	67 2f       	mov	r22, r23
    21d6:	71 91       	ld	r23, Z+
    21d8:	77 23       	and	r23, r23
    21da:	e1 f7       	brne	.-8      	; 0x21d4 <strrev+0x4>
    21dc:	32 97       	sbiw	r30, 0x02	; 2
    21de:	04 c0       	rjmp	.+8      	; 0x21e8 <strrev+0x18>
    21e0:	7c 91       	ld	r23, X
    21e2:	6d 93       	st	X+, r22
    21e4:	70 83       	st	Z, r23
    21e6:	62 91       	ld	r22, -Z
    21e8:	ae 17       	cp	r26, r30
    21ea:	bf 07       	cpc	r27, r31
    21ec:	c8 f3       	brcs	.-14     	; 0x21e0 <strrev+0x10>
    21ee:	08 95       	ret

000021f0 <__udivmodhi4>:
    21f0:	aa 1b       	sub	r26, r26
    21f2:	bb 1b       	sub	r27, r27
    21f4:	51 e1       	ldi	r21, 0x11	; 17
    21f6:	07 c0       	rjmp	.+14     	; 0x2206 <__udivmodhi4_ep>

000021f8 <__udivmodhi4_loop>:
    21f8:	aa 1f       	adc	r26, r26
    21fa:	bb 1f       	adc	r27, r27
    21fc:	a6 17       	cp	r26, r22
    21fe:	b7 07       	cpc	r27, r23
    2200:	10 f0       	brcs	.+4      	; 0x2206 <__udivmodhi4_ep>
    2202:	a6 1b       	sub	r26, r22
    2204:	b7 0b       	sbc	r27, r23

00002206 <__udivmodhi4_ep>:
    2206:	88 1f       	adc	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	5a 95       	dec	r21
    220c:	a9 f7       	brne	.-22     	; 0x21f8 <__udivmodhi4_loop>
    220e:	80 95       	com	r24
    2210:	90 95       	com	r25
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	08 95       	ret

00002218 <_exit>:
    2218:	f8 94       	cli

0000221a <__stop_program>:
    221a:	ff cf       	rjmp	.-2      	; 0x221a <__stop_program>
